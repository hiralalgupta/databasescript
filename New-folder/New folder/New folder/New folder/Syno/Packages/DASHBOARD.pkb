create or replace
package BODY DASHBOARD
AS

FUNCTION AM8_IND
           RETURN DATE
           IS
           V_DATE DATE;
           BEGIN
          -- SELECT (SYSDATE + INTERVAL '150' MINUTE) INTO V_DATE FROM DUAL;
          -- It gives today date after 8:00 AM in indian time 
          SELECT  to_date(to_char(SYS_EXTRACT_UTC(systimestamp) +5.5/24 - interval '20' hour,'dd-Mon-yyyy hh24.mi.ss'),'dd-Mon-yyyy hh24.mi.ss') into V_DATE FROM DUAL;
           return V_DATE;
END AM8_IND;


PROCEDURE DAILY_PRODUCTIVITY

AS
V_COUNT NUMBER :=0;
V_COUNT_1OP NUMBER :=0;
V_PROD_VALUE NUMBER :=0;
V_USERID NUMBER:=0;
V_SEQ NUMBER:=0;
V_CURRENT_DATE DATE;
V_ST5_COUNT NUMBER;
V_SCR_COUNT NUMBER :=0;
V_DASHBOARD_ROLE_ID NUMBER;
V_DAILY_TARGET NUMBER;
V_STAGE_ROLE NUMBER :=0;

-- Date time consider 8.00 AM - 7.59 AM(next day for india)
V_IND_START timestamp; --:= CAST(TRUNC(SYSDATE)||' 08.00.00 AM ASIA/CALCUTTA' AS TIMESTAMP WITH TIME ZONE) AT TIME ZONE 'America/New_York';
V_IND_END TIMESTAMP := CAST(TRUNC(SYSDATE+1)||' 07.59.00 PM ASIA/CALCUTTA' AS TIMESTAMP WITH TIME ZONE) AT TIME ZONE 'America/New_York';
-- Date time consider 8.00 AM - 7.30 AM(next day for india)
V_IND_CURRENT_START timestamp := cast(TRUNC(SYSDATE)||' 07.59.00 PM ASIA/CALCUTTA' as timestamp with time zone) at time zone 'America/New_York'; 
V_IND_CURRENT_END TIMESTAMP := CAST(TRUNC(SYSDATE)||' 07.44.00 PM ASIA/CALCUTTA' AS TIMESTAMP WITH TIME ZONE) AT TIME ZONE 'America/New_York';
V_CURRENT NUMBER:=1;
V_CHK_NEXT_STAGE NUMBER:=0;
V_TIMESTAMP TIMESTAMP;
V_CHK NUMBER :=0;
V_CK_ROLE NUMBER :=0;
V_MSG VARCHAR2(500):='NA';
V_STATUS NUMBER(2):=1;
V_CURR_DUP number;
V_REASON varchar2(2000) :='Case Correction';
V_CHK_REASON number :=0;
V_DUPLICATE number :=0;
V_LOGID AUDITLOG.LOGID%TYPE;
v_dup_orther_user NUMBER :=0;
P_STATUS NUMBER:=0;
V_CHK_FAIL NUMBER:=0;
V_RE_MSG VARCHAR2(10);
V_DUP_OTHER_SAME_DATE NUMBER :=0;
V_DUP_VAL NUMBER :=0;
BEGIN

 
 begin   
 
  if TRUNC(sysdate)= TRUNC(AM8_IND) then
   V_IND_START := CAST(TRUNC(SYSDATE)||' 08.00.00 PM ASIA/CALCUTTA' AS TIMESTAMP WITH TIME ZONE) AT TIME ZONE 'America/New_York';
   V_IND_END := CAST(TRUNC(SYSDATE+1)||' 08.00.00 PM ASIA/CALCUTTA' AS TIMESTAMP WITH TIME ZONE) AT TIME ZONE 'America/New_York';
  -- DBMS_OUTPUT.PUT_LINE('fIRST CONDITION--'||TO_CHAR(V_IND_START));
  ELSE
   V_IND_START := CAST(TRUNC(SYSDATE-1)||' 08.00.00 PM ASIA/CALCUTTA' AS TIMESTAMP WITH TIME ZONE) AT TIME ZONE 'America/New_York';
   V_IND_END := CAST(TRUNC(SYSDATE)||' 08.00.00 PM ASIA/CALCUTTA' AS TIMESTAMP WITH TIME ZONE) AT TIME ZONE 'America/New_York';
  -- DBMS_OUTPUT.PUT_LINE('V_IND_START--'||TO_CHAR(V_IND_START));
  END IF;
  IF CURRENT_TIMESTAMP < V_IND_CURRENT_START AND CURRENT_TIMESTAMP > V_IND_CURRENT_END
  THEN
  V_CURRENT:=2;
  END IF;
  
  /*
  if current_timestamp > cast(TRUNC(sysdate)||' 08.00.00 PM ASIA/CALCUTTA' as timestamp with time zone) at time zone 'America/New_York' then
    V_IND_START := cast(TRUNC(sysdate)||' 08.00.00 PM ASIA/CALCUTTA' as timestamp with time zone) at time zone 'America/New_York';
    else
     V_IND_START := cast(TRUNC(sysdate-1)||' 08.00.00 PM ASIA/CALCUTTA' as timestamp with time zone) at time zone 'America/New_York';
  END IF;
  */
 -- delete from FAILCASES where TRUNC(TIMESTAMP)=TRUNC(AM8_IND);
 delete from DAILY_PRODUCTIVITY where TRUNC(day)=TRUNC(AM8_IND);
commit;

      FOR REC IN ( SELECT  CASEID, STAGEID, USERID, FILE_SEGMENT,ISCOMPLETED,TOTALPAGES FROM  
            (
            --COMPLETED CASE
          
            
             SELECT AU.CASEID,     AU.STAGEID,    A.USERID,    A.FILE_SEGMENT,    A.ISCOMPLETED,SEG.TOTALPAGES  FROM PARALLELCASESTATUS A,   
             (SELECT COUNT(ORIGINALPAGENUMBER) TOTALPAGES,CASEID,FILE_SEGMENT,STAGEID FROM SEGMENTS_FOR_PAGES_V WHERE STAGEID=4  
             GROUP BY CASEID,FILE_SEGMENT,STAGEID) SEG,AUDITLOG AU  WHERE 
             TIMESTAMP >V_IND_START
            AND AU.STAGEID=A.STAGEID AND AU.USERID=A.USERID AND SEG.CASEID=AU.CASEID AND AU.ACTIONID=87
            AND SEG.CASEID=A.CASEID AND A.STAGEID=SEG.STAGEID AND A.FILE_SEGMENT=SEG.FILE_SEGMENT
             AND A.ISCOMPLETED='Y'
             
            UNION 
            --Current loading case
            SELECT  V.CASEID,V.STAGEID,V.USERID,V.FILE_SEGMENT,V.ISCOMPLETED,P.TOTALPAGES FROM GET_CASE_STAGE_STATUS_V V,
            AUDITLOG AU,(select COUNT(1) TOTALPAGES,CASEID,FILE_SEGMENT,STAGEID from SEGMENTS_FOR_PAGES_V where STAGEID=4 
            AND  COMPLETETIMESTAMP > V_IND_START
           
            AND ISCOMPLETED='Y' AND ISDELETED='N' GROUP BY CASEID,FILE_SEGMENT,STAGEID) P
            WHERE
            AU.TIMESTAMP >V_IND_START
            AND AU.ACTIONID=85  AND P.CASEID=V.CASEID AND V.STAGEID=P.STAGEID AND V.FILE_SEGMENT=P.FILE_SEGMENT
            AND V.CASEID=AU.CASEID AND V.STAGEID=AU.STAGEID AND V.USERID=AU.USERID AND V.STAGEID=4
            AND V.ISCOMPLETED='N'
             and 1 = V_CURRENT
            ) ORDER BY USERID) LOOP
  
  

  ---REASSIGNED CASEID FOR CURRENT DATE
 
   
   SELECT CHK_FAIL_BY_QA_QC(REC.CASEID,REC.STAGEID,REC.TOTALPAGES,V_IND_START,V_IND_END) INTO V_CHK_FAIL FROM DUAL;
     IF V_CHK_FAIL =1 THEN
      
        FAIL_QA(P_USERID=>REC.USERID,P_CASEID=>REC.CASEID,P_STAGEID=>REC.STAGEID,P_TOTALPAGES=>REC.TOTALPAGES,P_STATUS=>P_STATUS,V_IND_START =>V_IND_START,V_IND_END  =>V_IND_END);
        P_STATUS :=1;
      ELSE
      
      SELECT DUP_USER(REC.CASEID,REC.USERID,REC.STAGEID ) INTO V_DUP_VAL FROM DUAL;
      
      
         IF CURRENT_TIMESTAMP < V_IND_CURRENT_START AND CURRENT_TIMESTAMP > V_IND_CURRENT_END THEN
              REASSIGN_USER_1OP(P_USERID =>REC.USERID,P_CASEID=>REC.CASEID,P_STAGEID=>REC.STAGEID,
              P_DASHBOARD_ROLE_ID=>1,P_TOTALPAGES=>REC.TOTALPAGES,P_STATUS=>P_STATUS,P_MSG=>V_MSG,V_IND_START=>V_IND_START,V_IND_END=>V_IND_END);
         END IF;
      P_STATUS :=V_DUP_VAL;
     END IF;
  
  /* 
        select COUNT(1) INTO V_COUNT from 
                (select CASEID,STAGEID,USERID,max(timestamp) as timestamp,ORIGINALVALUE from AUDITLOG where ACTIONID=87 and STAGEID=4  group by CASEID,
                STAGEID,USERID,ORIGINALVALUE HAVING COUNT(TIMESTAMP)>=2) AU
                WHERE
                 timestamp > V_IND_START
                  and timestamp >(select max(timestamp) from AUDITLOG where ACTIONID=85 and STAGEID=5 and REC.CASEID=CASEID)
                AND REC.CASEID=CASEID AND REC.STAGEID=STAGEID AND   REC.USERID=USERID;*/
  
  IF --V_COUNT = 0 
  P_STATUS =0
  THEN
  
         BEGIN
          
       SELECT DASHBOARD_ROLE_ID,CASE WHEN (EFFECT_DATE+NVL(NEW_HIRE_DURATION,0)-1) >= SYSDATE
             THEN NEW_HIRE_TARGET ELSE DAILY_TARGET END  INTO V_DASHBOARD_ROLE_ID,V_DAILY_TARGET FROM USER_DEFAULT_ROLE DR,ROLE_TARGETS RT
             where EFFECT_DATE=(select max(EFFECT_DATE) from USER_DEFAULT_ROLE UDR where UDR.USER_ID=DR.USER_ID)
             and USER_ID=REC.USERID and DR.DASHBOARD_ROLE_ID=RT.ROLE_ID;
         select COUNT(1) into V_STAGE_ROLE from DASHBOARD_ROLE_MAPPING where DASHBOARD_ROLE_ID=V_DASHBOARD_ROLE_ID and STAGEID=REC.STAGEID; 
            
            IF V_STAGE_ROLE<>0 THEN  
         -- IF REC.FILE_SEGMENT =1  THEN
            IF V_USERID != REC.USERID THEN
             V_USERID := REC.USERID;
             V_PROD_VALUE := REC.TOTALPAGES;
             V_SEQ := DAILY_PRODUCTIVITY_SEQ.NEXTVAL;
          
             
             
            ELSIF V_USERID = REC.USERID THEN
              V_PROD_VALUE := V_PROD_VALUE + REC.TOTALPAGES;
            END IF;
        
        
        
      
       
            DELETE FROM DAILY_PRODUCTIVITY WHERE USER_ID =REC.USERID AND ROLE_ID=V_DASHBOARD_ROLE_ID AND TRUNC(DAY)=TRUNC(AM8_IND);
          --  AND (TO_TIMESTAMP(DAY)  AT TIME ZONE 'America/New_York' BETWEEN V_IND_START AND V_IND_END);
            INSERT INTO DAILY_PRODUCTIVITY (PRODUCTIVITYID,ROLE_ID,PRODUCTIVITY_VALUE,DAILY_TARGET,USER_ID,DAY,CREATED_DATE)
            values(V_SEQ,V_DASHBOARD_ROLE_ID,V_PROD_VALUE,V_DAILY_TARGET,V_USERID,AM8_IND,sysdate);
            
             V_USERID := REC.USERID;
        END IF;
           
           commit;
       EXCEPTION
        when OTHERS then
          NULL;
       END;
        
         
        
  
   
   ELSE
   
   
   --IF CASE DOES MOVE NEXT STAGE
   NULL;
  /*
    if current_timestamp >=V_IND_CURRENT_START
      AND CURRENT_TIMESTAMP <=V_IND_CURRENT_END THEN
      
        SELECT COUNT(*) INTO V_CURR_DUP FROM AUDITLOG WHERE ACTIONID=87 AND STAGEID=REC.STAGEID AND TIMESTAMP > V_IND_START AND CASEID=REC.CASEID AND  USERID=REC.USERID
               GROUP BY CASEID HAVING COUNT(CASEID)>=2;
               IF V_CURR_DUP<>0 THEN
     
      SELECT DASHBOARD_ROLE_ID,CASE WHEN (EFFECT_DATE+NVL(NEW_HIRE_DURATION,0)-1) >= SYSDATE
             THEN NEW_HIRE_TARGET ELSE DAILY_TARGET END  INTO V_DASHBOARD_ROLE_ID,V_DAILY_TARGET FROM USER_DEFAULT_ROLE DR,ROLE_TARGETS RT
             WHERE EFFECT_DATE=(SELECT MAX(EFFECT_DATE) FROM USER_DEFAULT_ROLE UDR WHERE UDR.USER_ID=DR.USER_ID)
             AND USER_ID=REC.USERID AND DR.DASHBOARD_ROLE_ID=RT.ROLE_ID;
             
      DASHBOARD.REASSIGN_CASES(P_USERID =>REC.USERID,P_STAGEID =>REC.STAGEID,P_CASEID =>REC.CASEID,P_TOTALPAGES =>REC.TOTALPAGES, P_ROLE_ID =>V_DASHBOARD_ROLE_ID,P_MSG =>V_MSG,P_STATUS =>V_STATUS) ;
        END IF;
        END IF;
  */
   
  END IF;
    
  end LOOP;
  
  COMMIT;
  EXCEPTION
   WHEN OTHERS THEN
   ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Step-1OP is not successfully completed for Daily Productivity Report');
        STATUSMESSAGE := 'An error was encountered - '||SQLCODE||' - '||SQLERRM;
        LOG_APEX_ERROR(101,'Step-1OP is not successfully completed for Daily Productivity Report',statusMessage);
    
    
  END;
  ---For Start QA-------------------------------------------------------------------

begin
FOR REC IN (SELECT  A.CASEID,A.USERID,A.STAGEID,C.TOTALPAGES,MAX(A.TIMESTAMP) AS TIMESTAMP,EFF.DASHBOARD_ROLE_ID FROM AUDITLOG A,CASES C,
 (select DASHBOARD_ROLE_ID,USER_ID  FROM USER_DEFAULT_ROLE DR,ROLE_TARGETS RT
             where EFFECT_DATE=(select max(EFFECT_DATE) from USER_DEFAULT_ROLE UDR where UDR.USER_ID=DR.USER_ID)
              and DR.DASHBOARD_ROLE_ID=RT.ROLE_ID) EFF,DASHBOARD_ROLE_MAPPING DRP 
              WHERE A.CASEID=C.CASEID  AND A.TIMESTAMP > V_IND_START   and A.ACTIONID=87  AND A.STAGEID=DRP.STAGEID AND  DRP.DASHBOARD_ROLE_ID =2 
                  and DRP.DASHBOARD_ROLE_ID=EFF.DASHBOARD_ROLE_ID and a.USERID=USER_ID 
             GROUP BY  A.CASEID,A.USERID,A.STAGEID,C.TOTALPAGES,EFF.DASHBOARD_ROLE_ID order by A.USERID,EFF.DASHBOARD_ROLE_ID
        ) 
        LOOP
begin   

 FAIL_QA(P_USERID=>REC.USERID,P_CASEID=>REC.CASEID,P_STAGEID=>REC.STAGEID,P_TOTALPAGES=>REC.TOTALPAGES,P_STATUS=>P_STATUS,V_IND_START =>V_IND_START,V_IND_END  =>V_IND_END);
               
  select MAX(TIMESTAMP),MAX(LOGID) into V_TIMESTAMP,V_LOGID from AUDITLOG where STAGEID=REC.STAGEID and CASEID=REC.CASEID and ACTIONID=87;
 
--        SELECT COUNT(1) INTO V_ST5_COUNT FROM 
--                (SELECT CASEID,STAGEID,USERID,MAX(TIMESTAMP) AS TIMESTAMP FROM AUDITLOG WHERE ACTIONID=87 AND STAGEID=5  GROUP BY CASEID,
--                STAGEID,USERID HAVING COUNT(TIMESTAMP)>=2) AU WHERE 
--                 TIMESTAMP > V_IND_START
--                  AND TIMESTAMP >(SELECT MAX(TIMESTAMP) FROM AUDITLOG WHERE ACTIONID=85 AND STAGEID=6 AND REC.CASEID=CASEID)
--                AND REC.CASEID=CASEID AND REC.STAGEID=STAGEID AND REC.USERID=USERID;
-- 

        SELECT DUP_USER(REC.CASEID,REC.USERID,REC.STAGEID ) INTO V_DUP_VAL FROM DUAL;
            
      
         IF CURRENT_TIMESTAMP < V_IND_CURRENT_START AND CURRENT_TIMESTAMP > V_IND_CURRENT_END THEN
            REASSIGN_USER(P_USERID =>REC.USERID,P_CASEID=>REC.CASEID,P_STAGEID=>REC.STAGEID,
                  P_DASHBOARD_ROLE_ID=>REC.DASHBOARD_ROLE_ID,P_TOTALPAGES=>REC.TOTALPAGES,P_STATUS=>P_STATUS,P_MSG=>V_MSG,V_IND_START=>V_IND_START,V_IND_END=>V_IND_END);
         END IF;
           P_STATUS :=V_DUP_VAL;
  ---FOR FRESH CASE 
  if  P_STATUS=0 AND REC.TIMESTAMP=V_TIMESTAMP then
      begin
            SELECT DASHBOARD_ROLE_ID,CASE WHEN (EFFECT_DATE+NVL(NEW_HIRE_DURATION,0)-1) >= SYSDATE 
              THEN NEW_HIRE_TARGET ELSE DAILY_TARGET END  INTO V_DASHBOARD_ROLE_ID,V_DAILY_TARGET FROM USER_DEFAULT_ROLE DR,ROLE_TARGETS RT
             where EFFECT_DATE=(select max(EFFECT_DATE) from USER_DEFAULT_ROLE UDR where UDR.USER_ID=DR.USER_ID)
             and USER_ID=REC.USERID and DR.DASHBOARD_ROLE_ID=RT.ROLE_ID;      
           select COUNT(1) into V_STAGE_ROLE from DASHBOARD_ROLE_MAPPING where DASHBOARD_ROLE_ID=V_DASHBOARD_ROLE_ID and STAGEID=REC.STAGEID;
          
           IF V_STAGE_ROLE<>0 THEN
            IF V_USERID != REC.USERID THEN
             V_USERID := REC.USERID;
             V_PROD_VALUE := REC.TOTALPAGES;
             V_SEQ := DAILY_PRODUCTIVITY_SEQ.NEXTVAL;
            
            
            ELSIF V_USERID = REC.USERID THEN
              V_PROD_VALUE := V_PROD_VALUE + REC.TOTALPAGES;
            
            END IF;
         
         
            DELETE FROM DAILY_PRODUCTIVITY WHERE USER_ID =REC.USERID AND ROLE_ID=V_DASHBOARD_ROLE_ID AND TRUNC(DAY)=TRUNC(AM8_IND);
          --  AND (TO_TIMESTAMP(DAY)  AT TIME ZONE 'America/New_York' BETWEEN V_IND_START AND V_IND_END);
            INSERT INTO DAILY_PRODUCTIVITY (PRODUCTIVITYID,ROLE_ID,PRODUCTIVITY_VALUE,DAILY_TARGET,USER_ID,DAY,CREATED_DATE)
            VALUES(V_SEQ,V_DASHBOARD_ROLE_ID,V_PROD_VALUE,V_DAILY_TARGET,V_USERID,AM8_IND,SYSDATE);
            commit;
            V_USERID := REC.USERID;
            end if;
             
       EXCEPTION
        when OTHERS then
          null;
       END;
  ELSE
   NULL;
   
   --REASSIGN CASE
   
   SELECT COUNT(1) INTO V_DUP_OTHER_SAME_DATE FROM CASEHISTORYSUM CA WHERE CASEID=REC.CASEID AND STAGEID=REC.STAGEID AND USERID=REC.USERID AND CASEID
            IN (SELECT CASEID FROM CASEHISTORYSUM WHERE ASSIGNMENT_REASON='Case Correction By Other User' AND STAGEID=CA.STAGEID AND USERID<>REC.USERID);
          
          IF V_DUP_OTHER_SAME_DATE<>0 AND CURRENT_TIMESTAMP < V_IND_CURRENT_START AND CURRENT_TIMESTAMP > V_IND_CURRENT_END THEN
                                    INSERT INTO FAILCASES (FAILID,ROLE_ID,TOTALPAGE,STAGEID,USER_ID,TIMESTAMP,CASEID,TYPE)
                                     VALUES(SEQ_FAILCASE.NEXTVAL,2,REC.TOTALPAGES,REC.STAGEID,REC.USERID,SYSTIMESTAMP,REC.CASEID,'RE');
                                  COMMIT;
          END IF; 
                   
--         if current_timestamp >=V_IND_CURRENT_START
--          AND CURRENT_TIMESTAMP <=V_IND_CURRENT_END THEN
--         
--          SELECT COUNT(*) INTO V_CURR_DUP FROM AUDITLOG WHERE ACTIONID=87 AND STAGEID=REC.STAGEID AND TIMESTAMP > V_IND_START AND CASEID=REC.CASEID AND  USERID=REC.USERID
--                   GROUP BY CASEID HAVING COUNT(CASEID)>=2;
--                   IF V_CURR_DUP<>0 THEN
--                   
--          SELECT DASHBOARD_ROLE_ID,CASE WHEN (EFFECT_DATE+NVL(NEW_HIRE_DURATION,0)-1) >= SYSDATE
--                 THEN NEW_HIRE_TARGET ELSE DAILY_TARGET END  INTO V_DASHBOARD_ROLE_ID,V_DAILY_TARGET FROM USER_DEFAULT_ROLE DR,ROLE_TARGETS RT
--                 WHERE EFFECT_DATE=(SELECT MAX(EFFECT_DATE) FROM USER_DEFAULT_ROLE UDR WHERE UDR.USER_ID=DR.USER_ID)
--                 AND USER_ID=REC.USERID AND DR.DASHBOARD_ROLE_ID=RT.ROLE_ID;
--                 
--          REASSIGN_CASES(P_USERID =>REC.USERID,P_STAGEID =>REC.STAGEID,P_CASEID =>REC.CASEID,P_TOTALPAGES =>REC.TOTALPAGES, P_ROLE_ID =>V_DASHBOARD_ROLE_ID,P_MSG =>V_MSG,P_STATUS =>V_STATUS,P_SEG =>'1') ;
--        END IF;
--        END IF;
   
  END IF;
  
  NULL;
  COMMIT;
  EXCEPTION
   WHEN OTHERS THEN
   ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Step-1QA is not successfully completed for Daily Productivity Report');
    STATUSMESSAGE := 'An error was encountered - '||SQLCODE||' - '||SQLERRM;
        LOG_APEX_ERROR(101,'Step-1QA is not successfully completed for Daily Productivity Report',STATUSMESSAGE);
  end;
  END LOOP;
-- COMMIT;
--  EXCEPTION
--   WHEN OTHERS THEN
--   ROLLBACK;
--    DBMS_OUTPUT.PUT_LINE('Step-1QA is not successfully completed for Daily Productivity Report');
--    STATUSMESSAGE := 'An error was encountered - '||SQLCODE||' - '||SQLERRM;
--        LOG_APEX_ERROR(105,'Step-1QA is not successfully completed for Daily Productivity Report',STATUSMESSAGE);
  end;
  commit;
  ---For End QA-------------------------------------------------------------------

  -----For -2OP---------------------------------------------------------------------
  begin
  for REC in (select ST6.STAGEID,ST6.CASEID,ST6.USERID,p.TOTALPAGES,DASHBOARD_ROLE_ID,timestamp,logid from 
              (SELECT 
                  AU.STAGEID,AU.CASEID,AU.USERID,max(timestamp) as timestamp,EFF.DASHBOARD_ROLE_ID, max(logid) as logid from AUDITLOG AU,DASHBOARD_ROLE_MAPPING DRP,
                 (select DASHBOARD_ROLE_ID,USER_ID  FROM USER_DEFAULT_ROLE DR,ROLE_TARGETS RT
             where EFFECT_DATE=(select max(EFFECT_DATE) from USER_DEFAULT_ROLE UDR where UDR.USER_ID=DR.USER_ID)
              and DR.DASHBOARD_ROLE_ID=RT.ROLE_ID) EFF
                 where AU.STAGEID=DRP.STAGEID and  DRP.DASHBOARD_ROLE_ID in (3,5) and AU.ACTIONID=87 
                  and DRP.DASHBOARD_ROLE_ID=EFF.DASHBOARD_ROLE_ID  
            AND USER_ID=USERID
              AND   TIMESTAMP > V_IND_START --AND  timestamp < V_IND_END
              group by    AU.STAGEID,AU.CASEID,AU.USERID,EFF.DASHBOARD_ROLE_ID
                ) ST6,(select COUNT(PAGEID) TOTALPAGES,CASEID from PAGES group by CASEID) P 
                WHERE ST6.CASEID=P.CASEID 
                order by ST6.USERID,DASHBOARD_ROLE_ID
              ) LOOP
      
      ---REASSIGN CASE
     select MAX(TIMESTAMP),MAX(LOGID) into V_TIMESTAMP,V_LOGID from AUDITLOG where STAGEID=REC.STAGEID and CASEID=REC.CASEID and ACTIONID=87;
      select COUNT(1) into V_SCR_COUNT from CASES C,CLIENTS CL where CL.CLIENTID=C.CLIENTID and CL.FILE_TYPE='SCREENING' and C.CASEID=REC.CASEID;
  /*   select COUNT(1) into V_COUNT from AUDITLOG where rowid in
       (select RN from 
       (SELECT ROWID RN,RANK() OVER (PARTITION BY A.CASEID,A.STAGEID,A.USERID--,a.ORIGINALVALUE 
       order by rowid DESC) LN,CASEID from AUDITLOG a where  ACTIONID=87) where LN<>1 )
       and timestamp > V_IND_START
           and timestamp >(select max(a.timestamp) from AUDITLOG a,DASHBOARD_ROLE_MAPPING DR where a.ACTIONID=85 and a.STAGEID=DR.STAGEID and  DR.DASHBOARD_ROLE_ID in (4,6) and REC.CASEID=a.CASEID)
          and REC.CASEID=CASEID and REC.STAGEID=STAGEID and REC.USERID=USERID;
    
     
     
     
     ---start duplicate caseid completed by another User not for current date
        SELECT count(1) into  v_dup_orther_user FROM 
          (SELECT CASEID,USERID,STAGEID,TIMESTAMP, RANK() OVER (PARTITION BY CASEID ORDER BY TIMESTAMP DESC) RN FROM
          (SELECT  CASEID,USERID,STAGEID,ACTIONID, MAX(TIMESTAMP) AS TIMESTAMP FROM AUDITLOG      
           GROUP BY  CASEID,USERID,STAGEID,ACTIONID)
           WHERE CASEID=REC.CASEID AND STAGEID=REC.STAGEID AND ACTIONID=87 AND TO_CHAR(TIMESTAMP,'mon')= TO_CHAR(V_IND_START,'mon')
           AND TIMESTAMP NOT BETWEEN V_IND_START AND V_IND_END
          ) WHERE RN=2;   
           
         select COUNT(1) into V_CHK_REASON  from CASEHISTORYSUM where STAGEID=REC.STAGEID and CASEID=REC.CASEID and ASSIGNMENT_REASON =V_REASON ;
         
 
         
        IF V_DUP_ORTHER_USER >= 1 THEN
       FOR I IN  
        ( SELECT * FROM 
          (SELECT CASEID,USERID,STAGEID,TIMESTAMP, RANK() OVER (PARTITION BY CASEID ORDER BY TIMESTAMP DESC) RN FROM
          (SELECT  CASEID,USERID,STAGEID,ACTIONID, MAX(TIMESTAMP) AS TIMESTAMP FROM AUDITLOG      
           GROUP BY  CASEID,USERID,STAGEID,ACTIONID)
           WHERE CASEID=REC.CASEID AND STAGEID=REC.STAGEID AND ACTIONID=87 AND TO_CHAR(TIMESTAMP,'mon')= TO_CHAR(V_IND_START,'mon')
          AND TIMESTAMP NOT BETWEEN V_IND_START AND V_IND_END
          ) WHERE RN=2) LOOP
          
          
           IF V_SCR_COUNT<>0 AND REC.DASHBOARD_ROLE_ID=5 THEN
                     INSERT INTO FAILCASES (FAILID,ROLE_ID,TOTALPAGE,STAGEID,USER_ID,TIMESTAMP,CASEID,TYPE)
                     values(SEQ_FAILCASE.NEXTVAL,REC.DASHBOARD_ROLE_ID,REC.TOTALPAGES,I.STAGEID,I.USERID,systimestamp,REC.CASEID,'RE');
                ELSIF V_SCR_COUNT=0 AND REC.DASHBOARD_ROLE_ID=3 THEN
                      INSERT INTO FAILCASES (FAILID,ROLE_ID,TOTALPAGE,STAGEID,USER_ID,TIMESTAMP,CASEID,TYPE)
                      values(SEQ_FAILCASE.NEXTVAL,REC.DASHBOARD_ROLE_ID,REC.TOTALPAGES,I.STAGEID,I.USERID,systimestamp,REC.CASEID,'RE');
                END IF;
             commit;
          
          END LOOP;
        
        END IF;
     ---end duplicate caseid completed by another User
         
     */   
    
    SELECT CHK_FAIL_BY_QA_QC(REC.CASEID,REC.STAGEID,REC.TOTALPAGES,V_IND_START,V_IND_END) INTO V_CHK_FAIL FROM DUAL;
     IF V_CHK_FAIL =1 THEN
      
       V_RE_MSG :='FA';
       FAIL_QA_QC(P_USERID=>REC.USERID,P_CASEID=>REC.CASEID,P_STAGEID=>REC.STAGEID,P_TOTALPAGES=>REC.TOTALPAGES,P_STATUS=>P_STATUS,V_IND_START =>V_IND_START,V_IND_END  =>V_IND_END);
       P_STATUS :=1;
      ELSE
       V_RE_MSG :='RE';
       
       SELECT DUP_USER(REC.CASEID,REC.USERID,REC.STAGEID ) INTO V_DUP_VAL FROM DUAL;
             
      
         IF CURRENT_TIMESTAMP < V_IND_CURRENT_START AND CURRENT_TIMESTAMP > V_IND_CURRENT_END THEN
          REASSIGN_USER(P_USERID =>REC.USERID,P_CASEID=>REC.CASEID,P_STAGEID=>REC.STAGEID,
          P_DASHBOARD_ROLE_ID=>REC.DASHBOARD_ROLE_ID,P_TOTALPAGES=>REC.TOTALPAGES,P_STATUS=>P_STATUS,P_MSG=>V_MSG,V_IND_START=>V_IND_START,V_IND_END=>V_IND_END);
          END IF;
        P_STATUS :=V_DUP_VAL;
     END IF;
        
  
        IF --V_COUNT=0 --and REC.TIMESTAMP=V_TIMESTAMP  AND V_CHK_REASON=0 
        P_STATUS=0 and REC.TIMESTAMP=V_TIMESTAMP
        then
        BEGIN

              SELECT DASHBOARD_ROLE_ID,CASE WHEN (EFFECT_DATE+NVL(NEW_HIRE_DURATION,0)-1) >= SYSDATE 
              then NEW_HIRE_TARGET else DAILY_TARGET end  into V_DASHBOARD_ROLE_ID,V_DAILY_TARGET from USER_DEFAULT_ROLE DR,ROLE_TARGETS RT
              where EFFECT_DATE=(select max(EFFECT_DATE) from USER_DEFAULT_ROLE UDR where UDR.USER_ID=DR.USER_ID)
              AND USER_ID=REC.USERID AND DR.DASHBOARD_ROLE_ID=RT.ROLE_ID;
             
          
        
         
           
            
            V_STAGE_ROLE := REC.DASHBOARD_ROLE_ID;
            
          --   SELECT COUNT(1) INTO V_CK_ROLE FROM DASHBOARD_ROLE_MAPPING WHERE DASHBOARD_ROLE_ID=V_DASHBOARD_ROLE_ID AND STAGEID=REC.STAGEID;
          --   IF  V_CK_ROLE<>0 THEN
           --  SELECT DASHBOARD_ROLE_ID INTO V_STAGE_ROLE FROM DASHBOARD_ROLE_MAPPING WHERE DASHBOARD_ROLE_ID=V_DASHBOARD_ROLE_ID AND STAGEID=REC.STAGEID;
        
         IF V_SCR_COUNT=0 AND V_STAGE_ROLE=3  THEN
                      --REGULAR INDEXER
           
         IF V_USERID != REC.USERID THEN
             V_USERID := REC.USERID;
             
             V_PROD_VALUE := REC.TOTALPAGES;
             V_SEQ := DAILY_PRODUCTIVITY_SEQ.NEXTVAL;
            
               
            
            ELSIF V_USERID = REC.USERID  THEN
              V_PROD_VALUE := V_PROD_VALUE + REC.TOTALPAGES;
            END IF;
         
                     
                        DELETE FROM DAILY_PRODUCTIVITY WHERE USER_ID =REC.USERID AND ROLE_ID=V_DASHBOARD_ROLE_ID AND TRUNC(DAY)=TRUNC(AM8_IND);
            INSERT INTO DAILY_PRODUCTIVITY (PRODUCTIVITYID,ROLE_ID,PRODUCTIVITY_VALUE,DAILY_TARGET,USER_ID,DAY,CREATED_DATE)
            VALUES(V_SEQ,V_DASHBOARD_ROLE_ID,V_PROD_VALUE,V_DAILY_TARGET,V_USERID,AM8_IND,SYSDATE);
             
                    
                       
          ELSIF V_SCR_COUNT<>0 AND V_STAGE_ROLE=5 THEN
                      ---TRIAGE INDEXER
             IF V_USERID != REC.USERID THEN
             V_USERID := REC.USERID;
             
             V_PROD_VALUE := REC.TOTALPAGES;
             V_SEQ := DAILY_PRODUCTIVITY_SEQ.NEXTVAL;
            
               
            
            ELSIF V_USERID = REC.USERID  THEN
              V_PROD_VALUE := V_PROD_VALUE + REC.TOTALPAGES;
            END IF;     
           
          
                      DELETE FROM DAILY_PRODUCTIVITY WHERE USER_ID =REC.USERID AND ROLE_ID=V_DASHBOARD_ROLE_ID AND TRUNC(DAY)=TRUNC(AM8_IND);
                 
                     INSERT INTO DAILY_PRODUCTIVITY (PRODUCTIVITYID,ROLE_ID,PRODUCTIVITY_VALUE,DAILY_TARGET,USER_ID,DAY,CREATED_DATE)
                     VALUES(V_SEQ,V_DASHBOARD_ROLE_ID,V_PROD_VALUE,V_DAILY_TARGET,V_USERID,AM8_IND,SYSDATE);
                     
                 
             END IF;
            V_USERID := REC.USERID;
           
          --  END IF;
             commit;
       EXCEPTION
        when OTHERS then
          NULL;
       END;
        ELSE
--         NULL;
--         --REASSIGN CASE
  
           SELECT COUNT(1) INTO V_DUP_OTHER_SAME_DATE FROM CASEHISTORYSUM CA WHERE CASEID=REC.CASEID AND STAGEID=REC.STAGEID AND USERID=REC.USERID AND CASEID
            IN (SELECT CASEID FROM CASEHISTORYSUM WHERE ASSIGNMENT_REASON='Case Correction By Other User' AND STAGEID=CA.STAGEID AND USERID<>REC.USERID);
          
          IF V_DUP_OTHER_SAME_DATE<>0 AND CURRENT_TIMESTAMP < V_IND_CURRENT_START AND CURRENT_TIMESTAMP > V_IND_CURRENT_END THEN
                                    INSERT INTO FAILCASES (FAILID,ROLE_ID,TOTALPAGE,STAGEID,USER_ID,TIMESTAMP,CASEID,TYPE)
                                     VALUES(SEQ_FAILCASE.NEXTVAL,REC.DASHBOARD_ROLE_ID,REC.TOTALPAGES,REC.STAGEID,REC.USERID,SYSTIMESTAMP,REC.CASEID,V_RE_MSG);
                                  COMMIT;
          END IF; 
/*
              IF CURRENT_TIMESTAMP >=V_IND_CURRENT_START   AND CURRENT_TIMESTAMP <=V_IND_CURRENT_END THEN
             
                     select count(1) INTO V_DUPLICATE from 
                       (select a.CASEID,a.STAGEID,a.USERID, max(timestamp) timestamp from AUDITLOG a where a.ACTIONID=87
                      GROUP BY A.CASEID,A.STAGEID,A.USERID) WHERE CASEID = REC.CASEID AND STAGEID=REC.STAGEID AND USERID=REC.USERID 
                         AND TIMESTAMP NOT BETWEEN V_IND_START AND V_IND_END and rownum=1
                           order by timestamp desc;
               
                     IF V_CHK_REASON<>0  THEN
                     
                       IF V_SCR_COUNT<>0 AND REC.DASHBOARD_ROLE_ID=5 THEN
                             INSERT INTO FAILCASES (FAILID,ROLE_ID,TOTALPAGE,STAGEID,USER_ID,TIMESTAMP,CASEID,TYPE)
                             values(SEQ_FAILCASE.NEXTVAL,REC.DASHBOARD_ROLE_ID,REC.TOTALPAGES,REC.STAGEID,V_USERID,systimestamp,REC.CASEID,'RE');
                        ELSIF V_SCR_COUNT=0 AND REC.DASHBOARD_ROLE_ID=3 THEN
                              INSERT INTO FAILCASES (FAILID,ROLE_ID,TOTALPAGE,STAGEID,USER_ID,TIMESTAMP,CASEID,TYPE)
                             values(SEQ_FAILCASE.NEXTVAL,REC.DASHBOARD_ROLE_ID,REC.TOTALPAGES,REC.STAGEID,V_USERID,systimestamp,REC.CASEID,'RE');
                        END IF;
                           COMMIT;
                              if V_DUPLICATE<>0 then   
                                DASHBOARD.REASSIGN_CASES(P_USERID =>REC.USERID,P_STAGEID =>REC.STAGEID,P_CASEID =>REC.CASEID,P_TOTALPAGES =>REC.TOTALPAGES, P_ROLE_ID =>REC.DASHBOARD_ROLE_ID,P_MSG =>V_MSG,P_STATUS =>V_STATUS) ;
                              end if;
                    END IF;
             END IF; 
  */  
        END IF;
  END LOOP;
  COMMIT;
  EXCEPTION
   WHEN OTHERS THEN
   ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Step-2OP is not successfully completed for Daily Productivity Report');
    STATUSMESSAGE := 'An error was encountered - '||SQLCODE||' - '||SQLERRM;
    LOG_APEX_ERROR(101,'Step-2OP is not successfully completed for Daily Productivity Report',statusMessage);
  END;
  ---For End 2OP-------------------------------------------------------------------
  
  
  
  -----For Start 2QC----------------------------------------------------------------------
  BEGIN
 
   for REC in (select ST6.STAGEID,ST6.CASEID,ST6.USERID,ST6.timestamp,p.TOTALPAGES,DASHBOARD_ROLE_ID,logid from 
              (select 
                  AU.STAGEID,AU.CASEID,AU.USERID,EFF.DASHBOARD_ROLE_ID ,max(AU.timestamp) as timestamp,max(logid) as logid from AUDITLOG AU,DASHBOARD_ROLE_MAPPING DRP,
                 (select DASHBOARD_ROLE_ID,USER_ID  FROM USER_DEFAULT_ROLE DR,ROLE_TARGETS RT
             where EFFECT_DATE=(select max(EFFECT_DATE) from USER_DEFAULT_ROLE UDR where UDR.USER_ID=DR.USER_ID)
              and DR.DASHBOARD_ROLE_ID=RT.ROLE_ID) EFF
                 where AU.STAGEID=DRP.STAGEID and  DRP.DASHBOARD_ROLE_ID in (4,6) and AU.ACTIONID=87 
                  and DRP.DASHBOARD_ROLE_ID=EFF.DASHBOARD_ROLE_ID  
            and USER_ID=USERID
              AND  timestamp > V_IND_START 
            group by AU.STAGEID,AU.CASEID,AU.USERID,EFF.DASHBOARD_ROLE_ID 
                ) ST6,(select COUNT(PAGEID) TOTALPAGES,CASEID from PAGES group by CASEID) P 
                where ST6.CASEID=P.CASEID 
                ORDER BY st6.USERID,DASHBOARD_ROLE_ID) LOOP
   ---REASSIGN CASE
   
   
   FAIL_QA_QC(P_USERID=>REC.USERID,P_CASEID=>REC.CASEID,P_STAGEID=>REC.STAGEID,
P_TOTALPAGES=>REC.TOTALPAGES,P_STATUS=>P_STATUS,V_IND_START =>V_IND_START,V_IND_END  =>V_IND_END);

 SELECT DUP_USER(REC.CASEID,REC.USERID,REC.STAGEID) INTO V_DUP_VAL FROM DUAL;
              
      
         IF CURRENT_TIMESTAMP < V_IND_CURRENT_START AND CURRENT_TIMESTAMP > V_IND_CURRENT_END THEN
       REASSIGN_USER(P_USERID =>REC.USERID,P_CASEID=>REC.CASEID,P_STAGEID=>REC.STAGEID,
            P_DASHBOARD_ROLE_ID=>REC.DASHBOARD_ROLE_ID,P_TOTALPAGES=>REC.TOTALPAGES,P_STATUS=>P_STATUS,P_MSG=>V_MSG,V_IND_START=>V_IND_START,V_IND_END=>V_IND_END);
       END IF;
       P_STATUS :=V_DUP_VAL;
     select max(timestamp),MAX(LOGID) into V_TIMESTAMP,V_LOGID from AUDITLOG where STAGEID=REC.STAGEID and CASEID=REC.CASEID and ACTIONID=87;
     
   /*   SELECT COUNT(1) INTO V_COUNT FROM 
          (SELECT CASEID,STAGEID,USERID,MAX(TIMESTAMP) AS TIMESTAMP FROM AUDITLOG WHERE ACTIONID=87 AND STAGEID=7  GROUP BY CASEID,
          STAGEID,USERID HAVING COUNT(TIMESTAMP)>=2) AU WHERE-- TRUNC(TIMESTAMP)=TRUNC(SYSDATE) 
        --  (TIMESTAMP BETWEEN V_IND_START AND V_IND_END)
           AU.TIMESTAMP > V_IND_START
          AND REC.CASEID=CASEID AND REC.STAGEID=STAGEID  AND REC.STAGEID=STAGEID AND REC.USERID=USERID;
       
      */ 
       
       
       if P_STATUS=0 and REC.TIMESTAMP =V_TIMESTAMP then
       BEGIN
         SELECT DASHBOARD_ROLE_ID,CASE WHEN (EFFECT_DATE+NVL(NEW_HIRE_DURATION,0)-1) >= SYSDATE 
              THEN NEW_HIRE_TARGET ELSE DAILY_TARGET END  INTO V_DASHBOARD_ROLE_ID,V_DAILY_TARGET FROM USER_DEFAULT_ROLE DR,ROLE_TARGETS RT
             WHERE EFFECT_DATE=(SELECT MAX(EFFECT_DATE) FROM USER_DEFAULT_ROLE UDR WHERE UDR.USER_ID=DR.USER_ID)
             AND USER_ID=REC.USERID AND DR.DASHBOARD_ROLE_ID=RT.ROLE_ID;
        
          IF V_USERID != REC.USERID THEN
             V_USERID := REC.USERID;
             V_PROD_VALUE := REC.TOTALPAGES;
             V_SEQ := DAILY_PRODUCTIVITY_SEQ.NEXTVAL;
                 
             
               
            
            ELSIF V_USERID = REC.USERID THEN
              V_PROD_VALUE := V_PROD_VALUE + REC.TOTALPAGES;
            END IF;
             SELECT COUNT(1) INTO V_CK_ROLE FROM DASHBOARD_ROLE_MAPPING WHERE DASHBOARD_ROLE_ID=V_DASHBOARD_ROLE_ID AND STAGEID=REC.STAGEID;
             
              IF  V_CK_ROLE<>0 THEN
            SELECT DASHBOARD_ROLE_ID INTO V_STAGE_ROLE FROM DASHBOARD_ROLE_MAPPING WHERE DASHBOARD_ROLE_ID=V_DASHBOARD_ROLE_ID AND STAGEID=REC.STAGEID;
             
             SELECT COUNT(1) INTO V_SCR_COUNT FROM CASES C,CLIENTS CL WHERE CL.CLIENTID=C.CLIENTID AND CL.FILE_TYPE='SCREENING' AND C.CASEID=REC.CASEID;
              
              
               IF V_SCR_COUNT=0 THEN
                      --Specialist QC / QA
                     
        
                      IF V_STAGE_ROLE=4 THEN
                        DELETE FROM DAILY_PRODUCTIVITY WHERE USER_ID =REC.USERID AND ROLE_ID=V_DASHBOARD_ROLE_ID AND TRUNC(DAY)=TRUNC(AM8_IND);
                   --  AND (TO_TIMESTAMP(DAY)  AT TIME ZONE 'America/New_York' BETWEEN V_IND_START AND V_IND_END);
                        INSERT INTO DAILY_PRODUCTIVITY (PRODUCTIVITYID,ROLE_ID,PRODUCTIVITY_VALUE,DAILY_TARGET,USER_ID,DAY,CREATED_DATE)
                        VALUES(V_SEQ,V_DASHBOARD_ROLE_ID,V_PROD_VALUE,V_DAILY_TARGET,V_USERID,AM8_IND,SYSDATE);
                        END IF;
              ELSE
                      ---Triage Specialist QC / QA
                       IF V_STAGE_ROLE =6 THEN
                        DELETE FROM DAILY_PRODUCTIVITY WHERE USER_ID =REC.USERID AND ROLE_ID=V_DASHBOARD_ROLE_ID AND TRUNC(DAY)=TRUNC(AM8_IND);
                      --  AND (TO_TIMESTAMP(DAY)  AT TIME ZONE 'America/New_York' BETWEEN V_IND_START AND V_IND_END);
                      INSERT INTO DAILY_PRODUCTIVITY (PRODUCTIVITYID,ROLE_ID,PRODUCTIVITY_VALUE,DAILY_TARGET,USER_ID,DAY,CREATED_DATE)
                         VALUES(V_SEQ,V_DASHBOARD_ROLE_ID,V_PROD_VALUE,V_DAILY_TARGET,V_USERID,AM8_IND,SYSDATE);
                       END IF;
              END IF;
              
              END IF;
        
              
            V_USERID := REC.USERID;
              commit;
       EXCEPTION
        when OTHERS then
          null;
       END;
        ELSE
        --    --REASSIGN CASE
        
          SELECT COUNT(1) INTO V_DUP_OTHER_SAME_DATE FROM CASEHISTORYSUM CA WHERE CASEID=REC.CASEID AND STAGEID=REC.STAGEID AND USERID=REC.USERID AND CASEID
            IN (SELECT CASEID FROM CASEHISTORYSUM WHERE ASSIGNMENT_REASON='Case Correction By Other User' AND STAGEID=CA.STAGEID AND USERID<>REC.USERID);
          
          IF V_DUP_OTHER_SAME_DATE<>0 AND CURRENT_TIMESTAMP < V_IND_CURRENT_START AND CURRENT_TIMESTAMP > V_IND_CURRENT_END THEN
                                    INSERT INTO FAILCASES (FAILID,ROLE_ID,TOTALPAGE,STAGEID,USER_ID,TIMESTAMP,CASEID,TYPE)
                                     VALUES(SEQ_FAILCASE.NEXTVAL,REC.DASHBOARD_ROLE_ID,REC.TOTALPAGES,REC.STAGEID,REC.USERID,SYSTIMESTAMP,REC.CASEID,V_RE_MSG);
                                  COMMIT;
          END IF; 
            /*   if current_timestamp >=V_IND_CURRENT_START  AND CURRENT_TIMESTAMP <=V_IND_CURRENT_END THEN
                
               SELECT COUNT(*) INTO V_CURR_DUP FROM AUDITLOG WHERE ACTIONID=87 AND STAGEID=REC.STAGEID AND TIMESTAMP > V_IND_START AND CASEID=REC.CASEID AND  USERID=REC.USERID
               GROUP BY CASEID HAVING COUNT(CASEID)>=2;
               IF V_CURR_DUP<>0 THEN
                
                SELECT DASHBOARD_ROLE_ID,CASE WHEN (EFFECT_DATE+NVL(NEW_HIRE_DURATION,0)-1) >= SYSDATE
                       THEN NEW_HIRE_TARGET ELSE DAILY_TARGET END  INTO V_DASHBOARD_ROLE_ID,V_DAILY_TARGET FROM USER_DEFAULT_ROLE DR,ROLE_TARGETS RT
                       WHERE EFFECT_DATE=(SELECT MAX(EFFECT_DATE) FROM USER_DEFAULT_ROLE UDR WHERE UDR.USER_ID=DR.USER_ID)
                       AND USER_ID=REC.USERID AND DR.DASHBOARD_ROLE_ID=RT.ROLE_ID;
                       
                DASHBOARD.REASSIGN_CASES(P_USERID =>REC.USERID,P_STAGEID =>REC.STAGEID,P_CASEID =>REC.CASEID,P_TOTALPAGES =>REC.TOTALPAGES, P_ROLE_ID =>V_DASHBOARD_ROLE_ID,P_MSG =>V_MSG,P_STATUS =>V_STATUS) ;
              END IF;
            END IF; 
    
    */
         NULL;
        END IF;   
  END LOOP;
  COMMIT;
  EXCEPTION
   WHEN OTHERS THEN
   ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Step-2QC is not successfully completed for Daily Productivity Report');
    STATUSMESSAGE := 'An error was encountered - '||SQLCODE||' - '||SQLERRM;
    LOG_APEX_ERROR(101,'Step-2QC is not successfully completed for Daily Productivity Report',statusMessage);
  END;
 
  -----For End 2QC------------------------------------------------------------------------ 

END DAILY_PRODUCTIVITY;

PROCEDURE REASSIGN_USER_1OP(P_USERID IN NUMBER,P_CASEID IN NUMBER,P_STAGEID IN NUMBER,
P_DASHBOARD_ROLE_ID IN NUMBER,P_TOTALPAGES IN NUMBER,P_STATUS OUT NUMBER,P_MSG OUT VARCHAR2,V_IND_START IN TIMESTAMP,V_IND_END  IN TIMESTAMP)
AS
V_COUNT NUMBER :=0;
V_CHK_REASON NUMBER :=0;
V_DUPLICATE number :=0;
V_REASON CASEHISTORYSUM.ASSIGNMENT_REASON%TYPE := 'Case Correction';
V_OTHER_REASON CASEHISTORYSUM.ASSIGNMENT_REASON%TYPE := 'Case Correction By Other User';
V_CHK_OTHER_REASON NUMBER :=0;
V_DUP_BY_OTHER NUMBER :=0;
V_STATUS NUMBER :=1;
V_CHK_FAIL_REASON NUMBER :=0;
V_USERID NUMBER(10,0);
V_TIMESTAMP TIMESTAMP;
V_STAGEID NUMBER;
V_DUP_BY_OTHER_SAME_DAY NUMBER :=0;
V_SEGMENT NUMBER :=0;
P_STATUS_MSG NUMBER :=0;
BEGIN
P_STATUS :=0;
--START Reassign different user

     SELECT COUNT(1) INTO V_CHK_OTHER_REASON  FROM CASEHISTORYSUM WHERE STAGEID=P_STAGEID AND  CASEID=P_CASEID AND ASSIGNMENT_REASON =V_OTHER_REASON ; 
 
 
      --  SELECT COUNT(*) INTO V_SEGMENT FROM PARALLELCASESTATUS WHERE CASEID=P_CASEID AND STAGEID=P_STAGEID;    
  IF V_CHK_OTHER_REASON <>0 --AND V_SEGMENT=1 
  THEN
   
   --S Reassign for different date
   
   SELECT COUNT(1) INTO V_DUP_BY_OTHER FROM (SELECT CASEID,USERID,STAGEID,TIMES,ORIGINALVALUE,ROWNUM RN FROM  (SELECT CASEID,USERID,STAGEID,MAX(TIMESTAMP) TIMES,ORIGINALVALUE FROM AUDITLOG WHERE CASEID=P_CASEID AND STAGEID=P_STAGEID AND ACTIONID=87
    GROUP BY CASEID,USERID,STAGEID,ORIGINALVALUE,trunc(timestamp)
     ORDER BY MAX(TIMESTAMP) DESC)) WHERE RN=2 AND TIMES NOT BETWEEN V_IND_START AND V_IND_END
      AND TO_CHAR(TIMES,'MON')=TO_CHAR(V_IND_START,'MON');
 
      
    SELECT COUNT(1) INTO V_DUP_BY_OTHER_SAME_DAY FROM (SELECT CASEID,USERID,STAGEID,TIMES,ROWNUM RN,ORIGINALVALUE FROM  (SELECT CASEID,USERID,STAGEID,MAX(TIMESTAMP) TIMES,ORIGINALVALUE FROM AUDITLOG WHERE CASEID=P_CASEID AND STAGEID=P_STAGEID AND ACTIONID=87
    GROUP BY CASEID,USERID,STAGEID,ORIGINALVALUE,trunc(timestamp)
     ORDER BY MAX(TIMESTAMP) DESC)) WHERE RN=2 AND TIMES BETWEEN V_IND_START AND V_IND_END;
     
      SELECT USERID INTO V_USERID  FROM (SELECT CASEID,USERID,STAGEID,TIMES,ROWNUM RN FROM  (SELECT CASEID,USERID,STAGEID,MAX(TIMESTAMP) TIMES FROM AUDITLOG WHERE CASEID=P_CASEID AND STAGEID=P_STAGEID AND ACTIONID=87
                      GROUP BY CASEID,USERID,STAGEID,trunc(timestamp)
                               ORDER BY MAX(TIMESTAMP) DESC)) WHERE RN=2;
          
          IF V_DUP_BY_OTHER_SAME_DAY<>0 THEN
         
                P_MSG := 'Case reassign to different user in same date';
                 
                     dbms_output.put_line('CaseId13 ='||to_char(P_CASEID)||'UserId ='||to_char(V_USERID));
                     INSERT INTO FAILCASES (FAILID,ROLE_ID,TOTALPAGE,STAGEID,USER_ID,TIMESTAMP,CASEID,TYPE)
                     VALUES(SEQ_FAILCASE.NEXTVAL,P_DASHBOARD_ROLE_ID,P_TOTALPAGES,P_STAGEID,V_USERID,SYSTIMESTAMP,P_CASEID,'RE');
                     COMMIT;
          
          ELSIF V_DUP_BY_OTHER<>0 THEN
           
                P_MSG := 'Case reassign to different user in different date';

                    dbms_output.put_line('CaseId12 ='||to_char(P_CASEID)||'UserId ='||to_char(V_USERID));
                    
                     INSERT INTO FAILCASES (FAILID,ROLE_ID,TOTALPAGE,STAGEID,USER_ID,TIMESTAMP,CASEID,TYPE)
                     VALUES(SEQ_FAILCASE.NEXTVAL,P_DASHBOARD_ROLE_ID,P_TOTALPAGES,P_STAGEID,V_USERID,SYSTIMESTAMP,P_CASEID,'RE');
                     COMMIT;
                     REASSIGN_CASES(P_USERID =>V_USERID,P_STAGEID =>P_STAGEID,P_CASEID =>P_CASEID,P_TOTALPAGES =>P_TOTALPAGES, P_ROLE_ID =>P_DASHBOARD_ROLE_ID,P_MSG =>P_MSG,P_STATUS_MSG => P_STATUS_MSG,P_SEG =>'1');
         
          
          END IF;
   --E Reassign for different date
    --FOR MULTIPLE SEGMENT
--    ELSIF V_CHK_OTHER_REASON <>0 AND V_SEGMENT<>1 THEN
--    FOR I IN (SELECT *  FROM PARALLELCASESTATUS WHERE CASEID=P_CASEID AND STAGEID=P_STAGEID) LOOP
--        IF I.UPDATED_TIMESTAMP > V_IND_START AND I.UPDATED_TIMESTAMP < V_IND_END THEN
--        
--        END IF;
--    END LOOP;
   END IF;
   
       SELECT COUNT(1) INTO V_CHK_REASON  FROM CASEHISTORYSUM WHERE STAGEID=P_STAGEID AND USERID=P_USERID AND  CASEID=P_CASEID AND ASSIGNMENT_REASON =V_REASON ;
 
  IF V_CHK_REASON<>0 --AND V_SEGMENT=1
  THEN
        P_STATUS :=1;
        select count(1) INTO V_DUPLICATE from 
             (select a.CASEID,a.STAGEID,a.USERID, max(timestamp) timestamp from AUDITLOG a where a.ACTIONID=87
               GROUP BY A.CASEID,A.STAGEID,A.USERID,trunc(timestamp)) WHERE CASEID = P_CASEID AND STAGEID=P_STAGEID AND USERID=P_USERID
               AND TIMESTAMP NOT BETWEEN V_IND_START AND V_IND_END
              AND ROWNUM=1  order by timestamp desc;


                IF V_DUPLICATE <>0  THEN
                  P_MSG := 'Case reassign to same user in different date';
                     INSERT INTO FAILCASES (FAILID,ROLE_ID,TOTALPAGE,STAGEID,USER_ID,TIMESTAMP,CASEID,TYPE)
                     VALUES(SEQ_FAILCASE.NEXTVAL,P_DASHBOARD_ROLE_ID,P_TOTALPAGES,P_STAGEID,P_USERID,SYSTIMESTAMP,P_CASEID,'RE');
                     COMMIT;
                    REASSIGN_CASES(P_USERID =>P_USERID,P_STAGEID =>P_STAGEID,P_CASEID =>P_CASEID,P_TOTALPAGES =>P_TOTALPAGES, P_ROLE_ID =>P_DASHBOARD_ROLE_ID,P_MSG =>P_MSG,P_STATUS_MSG =>P_STATUS_MSG,P_SEG =>'1') ;
                  --  P_STATUS :=1;  
              ELSE
                 P_MSG := 'Case reassign to same user in same date';
                  INSERT INTO FAILCASES (FAILID,ROLE_ID,TOTALPAGE,STAGEID,USER_ID,TIMESTAMP,CASEID,TYPE)
                  VALUES(SEQ_FAILCASE.NEXTVAL,P_DASHBOARD_ROLE_ID,P_TOTALPAGES,P_STAGEID,P_USERID,SYSTIMESTAMP,P_CASEID,'RE');
                  commit;
            END IF;
  END IF;
  

END REASSIGN_USER_1OP;

PROCEDURE REASSIGN_USER(P_USERID IN NUMBER,P_CASEID IN NUMBER,P_STAGEID IN NUMBER,
P_DASHBOARD_ROLE_ID IN NUMBER,P_TOTALPAGES IN NUMBER,P_STATUS OUT NUMBER,P_MSG OUT VARCHAR2,V_IND_START IN TIMESTAMP,V_IND_END  IN TIMESTAMP)
AS
V_COUNT NUMBER :=0;
V_CHK_REASON NUMBER :=0;
V_DUPLICATE number :=0;
V_REASON CASEHISTORYSUM.ASSIGNMENT_REASON%TYPE := 'Case Correction';
V_OTHER_REASON CASEHISTORYSUM.ASSIGNMENT_REASON%TYPE := 'Case Correction By Other User';
V_CHK_OTHER_REASON NUMBER :=0;
V_DUP_BY_OTHER NUMBER :=0;
P_STATUS_MSG NUMBER :=0;
V_CHK_FAIL_REASON NUMBER :=0;
V_USERID NUMBER(10,0);
V_TIMESTAMP TIMESTAMP;
V_STAGEID NUMBER;
BEGIN

P_STATUS :=0;
--START Reassign different user

     SELECT COUNT(1) INTO V_CHK_OTHER_REASON  FROM CASEHISTORYSUM WHERE STAGEID=P_STAGEID AND USERID=P_USERID AND  CASEID=P_CASEID AND ASSIGNMENT_REASON =V_OTHER_REASON ; 
   IF V_CHK_OTHER_REASON <>0 THEN
    
   --S Reassign for different date
       SELECT COUNT(1) INTO V_DUP_BY_OTHER FROM (SELECT CASEID,USERID,STAGEID,TIMES,ROWNUM RN FROM  (SELECT CASEID,USERID,STAGEID,MAX(TIMESTAMP) TIMES FROM AUDITLOG WHERE CASEID=P_CASEID AND STAGEID=P_STAGEID AND ACTIONID=87
           GROUP BY CASEID,USERID,STAGEID,trunc(timestamp)
          ORDER BY MAX(TIMESTAMP) DESC)) WHERE RN=2 AND TIMES NOT BETWEEN V_IND_START AND V_IND_END
             AND TO_CHAR(TIMES,'MON')=TO_CHAR(V_IND_START,'MON');
          
          IF V_DUP_BY_OTHER<>0 THEN
                P_MSG := 'Case reassign to different user in different date';
                  SELECT USERID INTO V_USERID  FROM (SELECT CASEID,USERID,STAGEID,TIMES,ROWNUM RN FROM  (SELECT CASEID,USERID,STAGEID,MAX(TIMESTAMP) TIMES FROM AUDITLOG WHERE CASEID=P_CASEID AND STAGEID=P_STAGEID AND ACTIONID=87
                      GROUP BY CASEID,USERID,STAGEID,trunc(timestamp)
                               ORDER BY MAX(TIMESTAMP) DESC)) WHERE RN=2;
                    
                     INSERT INTO FAILCASES (FAILID,ROLE_ID,TOTALPAGE,STAGEID,USER_ID,TIMESTAMP,CASEID,TYPE)
                     VALUES(SEQ_FAILCASE.NEXTVAL,P_DASHBOARD_ROLE_ID,P_TOTALPAGES,P_STAGEID,V_USERID,SYSTIMESTAMP,P_CASEID,'RE');
                     COMMIT;
                    REASSIGN_CASES(P_USERID =>V_USERID,P_STAGEID =>P_STAGEID,P_CASEID =>P_CASEID,P_TOTALPAGES =>P_TOTALPAGES, P_ROLE_ID =>P_DASHBOARD_ROLE_ID,P_MSG =>P_MSG,P_STATUS_MSG => P_STATUS_MSG,P_SEG =>'1');
         
          END IF;
   --E Reassign for different date
    
   END IF;
--END  Reassign different user



--Reassign same user for current_date

     SELECT COUNT(1) INTO V_CHK_REASON  FROM CASEHISTORYSUM WHERE STAGEID=P_STAGEID AND USERID=P_USERID AND  CASEID=P_CASEID AND ASSIGNMENT_REASON =V_REASON ;
 
  IF V_CHK_REASON<>0 THEN
        P_STATUS :=1;
        select count(1) INTO V_DUPLICATE from 
             (SELECT A.CASEID,A.STAGEID,A.USERID, MAX(TIMESTAMP) TIMESTAMP FROM AUDITLOG A WHERE A.ACTIONID=87
               GROUP BY A.CASEID,A.STAGEID,A.USERID,trunc(timestamp)) WHERE CASEID = P_CASEID AND STAGEID=P_STAGEID AND USERID=P_USERID
               AND TIMESTAMP NOT BETWEEN V_IND_START AND V_IND_END
              AND ROWNUM=1  order by timestamp desc;


                IF V_DUPLICATE <>0  THEN
                  P_MSG := 'Case reassign to same user in different date';
                     INSERT INTO FAILCASES (FAILID,ROLE_ID,TOTALPAGE,STAGEID,USER_ID,TIMESTAMP,CASEID,TYPE)
                     VALUES(SEQ_FAILCASE.NEXTVAL,P_DASHBOARD_ROLE_ID,P_TOTALPAGES,P_STAGEID,P_USERID,SYSTIMESTAMP,P_CASEID,'RE');
                     COMMIT;
                    REASSIGN_CASES(P_USERID =>P_USERID,P_STAGEID =>P_STAGEID,P_CASEID =>P_CASEID,P_TOTALPAGES =>P_TOTALPAGES, P_ROLE_ID =>P_DASHBOARD_ROLE_ID,P_MSG =>P_MSG,P_STATUS_MSG =>P_STATUS_MSG,P_SEG =>'1') ;
                  -- P_STATUS :=1; 
              ELSE
                 P_MSG := 'Case reassign to same user in same date';
                  INSERT INTO FAILCASES (FAILID,ROLE_ID,TOTALPAGE,STAGEID,USER_ID,TIMESTAMP,CASEID,TYPE)
                  VALUES(SEQ_FAILCASE.NEXTVAL,P_DASHBOARD_ROLE_ID,P_TOTALPAGES,P_STAGEID,P_USERID,SYSTIMESTAMP,P_CASEID,'RE');
                  commit;
            END IF;
  END IF;
           
END REASSIGN_USER;

PROCEDURE FAIL_QA_QC(P_USERID IN NUMBER,P_CASEID IN NUMBER,P_STAGEID IN NUMBER,
P_TOTALPAGES IN NUMBER,P_STATUS OUT NUMBER,V_IND_START IN TIMESTAMP,V_IND_END  IN TIMESTAMP)
AS
V_DAILY_TARGET NUMBER :=0;
V_DASHBOARD_ROLE_ID number :=0;
V_FAIL_REASON CASEHISTORYSUM.ASSIGNMENT_REASON%TYPE := 'Failed Quality Test';
V_REASON CASEHISTORYSUM.ASSIGNMENT_REASON%TYPE := 'Case Correction'; 
V_CHK_FAIL_REASON NUMBER :=0;
V_MSG VARCHAR2(500):='NA';
V_STATUS NUMBER(2):=1;
V_USERID NUMBER(10,0);
V_TIMESTAMP TIMESTAMP;
V_BACK_DATE NUMBER :=0;
V_STAGEID NUMBER;
V_CHK_REASON NUMBER:=0;
V_AHEAD_DATE NUMBER:=0;
V_EXISTS NUMBER :=0;
P_STATUS_MSG NUMBER :=0;
BEGIN
 P_STATUS :=0;
-- Fail Case by QA/QC
  IF P_STAGEID=6 THEN
     SELECT COUNT(1) INTO V_CHK_FAIL_REASON  FROM CASEHISTORYSUM WHERE STAGEID=P_STAGEID+1 AND CASEID=P_CASEID AND ASSIGNMENT_REASON =V_FAIL_REASON ;
    V_STAGEID :=6;
     IF V_CHK_FAIL_REASON<>0 THEN
              P_STATUS :=1;
     END IF;
  ELSIF P_STAGEID=7 THEN
     SELECT COUNT(1) INTO V_CHK_FAIL_REASON  FROM CASEHISTORYSUM WHERE STAGEID=P_STAGEID AND USERID=P_USERID AND CASEID=P_CASEID AND ASSIGNMENT_REASON =V_FAIL_REASON ;
   V_STAGEID :=6;
  END IF;
   IF V_CHK_FAIL_REASON<>0 THEN
   
     
      SELECT COUNT(1) INTO V_BACK_DATE  FROM (SELECT USERID,TIMESTAMP FROM AUDITLOG WHERE ACTIONID=87 AND  STAGEID=V_STAGEID AND CASEID=P_CASEID ORDER BY TIMESTAMP DESC)
     WHERE  (TIMESTAMP NOT BETWEEN V_IND_START AND V_IND_END) AND TO_CHAR(TIMESTAMP,'MON')=TO_CHAR(V_IND_START,'MON');
     
     SELECT COUNT(1) INTO V_AHEAD_DATE  FROM (SELECT USERID,TIMESTAMP FROM AUDITLOG WHERE ACTIONID=87 AND  STAGEID=V_STAGEID AND CASEID=P_CASEID ORDER BY TIMESTAMP DESC)
     WHERE  (TIMESTAMP BETWEEN V_IND_START AND V_IND_END);
     
      SELECT USERID,TIMESTAMP,STAGEID INTO V_USERID,V_TIMESTAMP,V_STAGEID  FROM (SELECT USERID,TIMESTAMP,STAGEID FROM AUDITLOG WHERE ACTIONID=87 AND  STAGEID=V_STAGEID AND CASEID=P_CASEID ORDER BY TIMESTAMP DESC)
        WHERE ROWNUM=1 ;
       SELECT COUNT(*) INTO V_EXISTS FROM FAILCASES WHERE CASEID=P_CASEID AND USER_ID=V_USERID AND TOTALPAGE=P_TOTALPAGES AND STAGEID=V_STAGEID; 
   IF V_EXISTS=0 THEN 
    
        SELECT DASHBOARD_ROLE_ID,CASE WHEN (EFFECT_DATE+NVL(NEW_HIRE_DURATION,0)-1) >= SYSDATE
                       THEN NEW_HIRE_TARGET ELSE DAILY_TARGET END  INTO V_DASHBOARD_ROLE_ID,V_DAILY_TARGET FROM USER_DEFAULT_ROLE DR,ROLE_TARGETS RT
                       WHERE EFFECT_DATE=(SELECT MAX(EFFECT_DATE) FROM USER_DEFAULT_ROLE UDR WHERE UDR.USER_ID=DR.USER_ID)
                       AND USER_ID=V_USERID AND DR.DASHBOARD_ROLE_ID=RT.ROLE_ID;        
     IF V_BACK_DATE <>0 THEN
      
     
     SELECT COUNT(1) INTO V_CHK_REASON  FROM CASEHISTORYSUM WHERE STAGEID=V_STAGEID AND CASEID=P_CASEID AND USERID=V_USERID AND ASSIGNMENT_REASON =V_REASON ;
     
     IF V_CHK_REASON=0 THEN
     
     
              INSERT INTO FAILCASES (FAILID,ROLE_ID,TOTALPAGE,STAGEID,USER_ID,TIMESTAMP,CASEID,TYPE)
              VALUES(SEQ_FAILCASE.NEXTVAL,V_DASHBOARD_ROLE_ID,P_TOTALPAGES,V_STAGEID,V_USERID,SYSTIMESTAMP,P_CASEID,'FA');
              COMMIT;
           REASSIGN_CASES(P_USERID =>V_USERID,P_STAGEID =>V_STAGEID,P_CASEID =>P_CASEID,P_TOTALPAGES =>P_TOTALPAGES, P_ROLE_ID =>V_DASHBOARD_ROLE_ID,P_MSG =>V_MSG,P_STATUS_MSG =>P_STATUS_MSG,P_SEG => '1') ;
     COMMIT;
     END IF;
     ELSIF V_AHEAD_DATE<>0 THEN
     
              INSERT INTO FAILCASES (FAILID,ROLE_ID,TOTALPAGE,STAGEID,USER_ID,TIMESTAMP,CASEID,TYPE)
              VALUES(SEQ_FAILCASE.NEXTVAL,V_DASHBOARD_ROLE_ID,P_TOTALPAGES,V_STAGEID,V_USERID,SYSTIMESTAMP,P_CASEID,'FA');
              COMMIT;
    END IF;
   
   END IF;
    ELSE
    P_STATUS := 0;
   END IF;
END FAIL_QA_QC;

PROCEDURE FAIL_QA(P_USERID IN NUMBER,P_CASEID IN NUMBER,P_STAGEID IN NUMBER,
P_TOTALPAGES IN NUMBER,P_STATUS OUT NUMBER,V_IND_START IN TIMESTAMP,V_IND_END  IN TIMESTAMP)
AS
V_DAILY_TARGET NUMBER :=0;
V_DASHBOARD_ROLE_ID number :=0;
V_FAIL_REASON CASEHISTORYSUM.ASSIGNMENT_REASON%TYPE := 'Failed Quality Test';
V_REASON CASEHISTORYSUM.ASSIGNMENT_REASON%TYPE := 'Case Correction'; 
V_CHK_FAIL_REASON NUMBER :=0;
V_MSG VARCHAR2(500):='NA';
V_STATUS NUMBER(2):=1;
V_USERID NUMBER(10,0);
V_TIMESTAMP TIMESTAMP;
V_BACK_DATE NUMBER :=0;
V_STAGEID NUMBER;
V_CHK_REASON NUMBER:=0;
V_EXISTS NUMBER :=0;
P_STATUS_MSG NUMBER :=0;
BEGIN
P_STATUS :=0;
-- Fail Case by QA/QC
        IF P_STAGEID=4 THEN
           
             SELECT COUNT(1) INTO V_CHK_FAIL_REASON  FROM CASEHISTORYSUM WHERE STAGEID=P_STAGEID+1  AND CASEID=P_CASEID AND ASSIGNMENT_REASON =V_FAIL_REASON ;
             IF V_CHK_FAIL_REASON<>0 THEN
              P_STATUS :=1;
            END IF;
        ELSIF P_STAGEID=5 THEN
            SELECT COUNT(1) INTO V_CHK_FAIL_REASON  FROM CASEHISTORYSUM WHERE STAGEID=P_STAGEID AND USERID=P_USERID AND CASEID=P_CASEID AND ASSIGNMENT_REASON =V_FAIL_REASON ;
             
        END IF;
       IF V_CHK_FAIL_REASON<>0 THEN
      
       FOR I IN (SELECT A.CASEID,MAX(A.TIMESTAMP) TIMES,A.STAGEID,P.USERID,A.ORIGINALVALUE,TOTALPAGES FROM AUDITLOG A,PARALLELCASESTATUS P,
                  (SELECT COUNT(ORIGINALPAGENUMBER) TOTALPAGES,CASEID,FILE_SEGMENT,STAGEID FROM SEGMENTS_FOR_PAGES_V WHERE STAGEID=4  
                 GROUP BY CASEID,FILE_SEGMENT,STAGEID) SEG
                    WHERE A.CASEID=P_CASEID AND A.ACTIONID=87 AND A.STAGEID=P.STAGEID AND P.CASEID=A.CASEID AND P.USERID=A.USERID 
                    AND A.STAGEID=4 AND SEG.CASEID=P.CASEID AND SEG.STAGEID=P.STAGEID AND SEG.FILE_SEGMENT=P.FILE_SEGMENT AND P.ISCOMPLETED='Y'
                    GROUP BY A.CASEID,A.STAGEID,P.USERID,A.ORIGINALVALUE,TOTALPAGES 
                    ORDER BY MAX(A.TIMESTAMP) DESC) LOOP
                    
                      SELECT COUNT(*) INTO V_EXISTS FROM FAILCASES WHERE CASEID=P_CASEID AND USER_ID=I.USERID AND TOTALPAGE=I.TOTALPAGES AND STAGEID=I.STAGEID; 
                IF V_EXISTS=0 THEN      
                  IF I.TIMES >  V_IND_START AND I.TIMES < V_IND_END THEN
                    INSERT INTO FAILCASES (FAILID,ROLE_ID,TOTALPAGE,STAGEID,USER_ID,TIMESTAMP,CASEID,TYPE)
                    VALUES(SEQ_FAILCASE.NEXTVAL,1,I.TOTALPAGES,I.STAGEID,I.USERID,SYSTIMESTAMP,P_CASEID,'FA');
                    COMMIT; 
                    
                  ELSIF (I.TIMES NOT BETWEEN  V_IND_START AND  V_IND_END) AND TO_CHAR(I.TIMES,'MON')=TO_CHAR(V_IND_START,'MON') THEN
                 
                    INSERT INTO FAILCASES (FAILID,ROLE_ID,TOTALPAGE,STAGEID,USER_ID,TIMESTAMP,CASEID,TYPE)
                    VALUES(SEQ_FAILCASE.NEXTVAL,1,I.TOTALPAGES,I.STAGEID,I.USERID,SYSTIMESTAMP,P_CASEID,'FA');
                    COMMIT; 
                   REASSIGN_CASES(P_USERID =>I.USERID,P_STAGEID =>I.STAGEID,P_CASEID =>P_CASEID,P_TOTALPAGES =>I.TOTALPAGES, P_ROLE_ID =>1,P_MSG =>V_MSG,P_STATUS_MSG =>P_STATUS_MSG,P_SEG =>I.ORIGINALVALUE) ;
                 
                  END IF;
              END IF;
              
      END LOOP;
    
        ELSE
        P_STATUS := 0;
       END IF;
END FAIL_QA;


FUNCTION CHK_FAIL_BY_QA_QC(P_CASEID IN NUMBER,P_STAGEID IN NUMBER,
P_TOTALPAGES IN NUMBER,V_IND_START IN TIMESTAMP,V_IND_END  IN TIMESTAMP) RETURN NUMBER
AS
V_CHK_FAIL_REASON NUMBER :=0;
V_FAIL_REASON CASEHISTORYSUM.ASSIGNMENT_REASON%TYPE := 'Failed Quality Test';
V_BACK_DATE NUMBER :=0;
V_STATUS NUMBER:=0;
BEGIN
    SELECT COUNT(1) INTO V_CHK_FAIL_REASON  FROM CASEHISTORYSUM WHERE STAGEID=(P_STAGEID+1) AND CASEID=P_CASEID AND ASSIGNMENT_REASON =V_FAIL_REASON ;
  
   SELECT COUNT(1) INTO V_BACK_DATE  FROM (SELECT USERID,TIMESTAMP FROM AUDITLOG WHERE ACTIONID=87 AND  STAGEID=(P_STAGEID +1) AND CASEID=P_CASEID ORDER BY TIMESTAMP DESC)
     WHERE  (TIMESTAMP  BETWEEN V_IND_START AND V_IND_END) ;--AND TO_CHAR(TIMESTAMP,'MON')=TO_CHAR(V_IND_START,'MON');
     
    IF V_CHK_FAIL_REASON<>0 AND V_BACK_DATE<>0 THEN
             V_STATUS :=1;
    ELSE 
            V_STATUS :=0;
    END IF;
    RETURN V_STATUS;
END CHK_FAIL_BY_QA_QC;

PROCEDURE REASSIGN_CASES(P_USERID IN NUMBER,P_STAGEID IN NUMBER,P_CASEID IN NUMBER,P_TOTALPAGES IN NUMBER, 
                        P_ROLE_ID IN NUMBER,P_MSG OUT VARCHAR2,P_STATUS_MSG OUT NUMBER,P_SEG IN VARCHAR2) 
AS
V_TIMESTAMP TIMESTAMP;
V_PRODUCTIVITY_VALUE NUMBER;
V_DATE DATE;
V_EXISTS NUMBER:=0;
BEGIN
   BEGIN

IF P_SEG='1' THEN

   SELECT  MIN(TIMESTAMP) INTO V_TIMESTAMP FROM (SELECT * FROM AUDITLOG WHERE USERID=P_USERID AND STAGEID=P_STAGEID AND CASEID=P_CASEID AND ACTIONID=87 AND TRUNC(SYSDATE,'MON')=TRUNC(TIMESTAMP,'MON'))  ;
ELSE
   SELECT  MIN(TIMESTAMP) INTO V_TIMESTAMP FROM (SELECT * FROM AUDITLOG WHERE USERID=P_USERID AND STAGEID=P_STAGEID AND CASEID=P_CASEID AND ACTIONID=87 AND ORIGINALVALUE = P_SEG AND TRUNC(SYSDATE,'MON')=TRUNC(TIMESTAMP,'MON'))  ;
END IF;

 SELECT COUNT(1) INTO V_EXISTS FROM DAILY_PRODUCTIVITY  WHERE  TRUNC(CREATED_DATE)=TRUNC(V_TIMESTAMP) AND ROLE_ID=P_ROLE_ID AND USER_ID=P_USERID;
 
IF V_EXISTS=0 THEN
   SELECT COUNT(1) INTO V_EXISTS FROM DAILY_PRODUCTIVITY  WHERE  TRUNC(CREATED_DATE)=TRUNC(V_TIMESTAMP-1) AND ROLE_ID=P_ROLE_ID AND USER_ID=P_USERID;
   IF V_EXISTS<>0 THEN
   V_TIMESTAMP := V_TIMESTAMP - 1;
   ELSE
   V_TIMESTAMP := V_TIMESTAMP + 1;
   END IF;
 END IF;
 

   UPDATE DAILY_PRODUCTIVITY SET PRODUCTIVITY_VALUE=PRODUCTIVITY_VALUE-P_TOTALPAGES WHERE TRUNC(CREATED_DATE)=TRUNC(V_TIMESTAMP) AND ROLE_ID=P_ROLE_ID AND USER_ID=P_USERID;
   COMMIT;
  SELECT PRODUCTIVITY_VALUE,DAY INTO V_PRODUCTIVITY_VALUE,V_DATE FROM DAILY_PRODUCTIVITY  WHERE TRUNC(CREATED_DATE)=TRUNC(V_TIMESTAMP) AND ROLE_ID=P_ROLE_ID AND USER_ID=P_USERID;

   UPDATE_INCENTIVE(P_USERID =>P_USERID,P_PRODUCTIVITY_VAL =>V_PRODUCTIVITY_VALUE,P_ROLEID =>P_ROLE_ID,P_TOATLPAGES =>P_TOTALPAGES,P_DATE =>V_DATE,P_MSG =>P_MSG,P_STATUS_MSG =>P_STATUS_MSG);
  P_MSG :='Reassign case is completed successfully.';
  P_STATUS_MSG :=0;
   EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
    P_MSG :='Reassign case is not completed for StageId: '|| P_STAGEID||' CaseId: '|| P_CASEID||' UserId: '||P_USERID;
    P_STATUS_MSG :=2;
    dbms_output.put_line('Reassign case is not completed for 1QA :'|| to_char(P_CASEID));
      
    STATUSMESSAGE := 'An error was encountered - '||SQLCODE||' - '||SQLERRM;
    LOG_APEX_ERROR(101,P_MSG,statusMessage,P_USERID);
        END;
  --  END IF;  
END REASSIGN_CASES;

PROCEDURE UPDATE_INCENTIVE(P_USERID IN NUMBER,P_PRODUCTIVITY_VAL IN NUMBER,P_ROLEID IN NUMBER,P_TOATLPAGES IN NUMBER,P_DATE IN DATE,P_MSG OUT VARCHAR2,P_STATUS_MSG OUT NUMBER) AS
V_CAL_INCENT NUMBER(10,2);
V_INCENTIVE NUMBER(10,2):=0;
V_EXISTS NUMBER :=0;
V_MIN_RANG NUMBER :=0;

BEGIN
V_CAL_INCENT :=P_PRODUCTIVITY_VAL ;

SELECT MIN(PRODUCTIVITY_LOWER_BOUND) INTO V_MIN_RANG FROM ROLE_PAYOUTS WHERE ROLE_ID=P_ROLEID;
IF  P_PRODUCTIVITY_VAL < V_MIN_RANG THEN
  UPDATE DAILY_INCENTIVE SET INCENTVE= 0,PAYOUT_RATE=0 
  WHERE USER_ID=P_USERID AND ROLE_ID=P_ROLEID AND TRUNC(DAY)=TRUNC(P_DATE);
  COMMIT;
END IF;

FOR I IN  (SELECT * FROM ROLE_PAYOUTS WHERE ROLE_ID=P_ROLEID  ORDER BY PRODUCTIVITY_LOWER_BOUND ASC) LOOP
    
    IF  V_CAL_INCENT >= I.PRODUCTIVITY_UPPER_BOUND THEN
    
      V_INCENTIVE := V_INCENTIVE + ((I.PRODUCTIVITY_UPPER_BOUND-I.PRODUCTIVITY_LOWER_BOUND) + 1) * I.PAYOUT_RATE;
      
   
    END IF;
  
    IF
    V_CAL_INCENT >= I.PRODUCTIVITY_LOWER_BOUND and V_CAL_INCENT <= I.PRODUCTIVITY_UPPER_BOUND
    THEN
    
    IF P_PRODUCTIVITY_VAL != I.PRODUCTIVITY_UPPER_BOUND THEN
     V_INCENTIVE := V_INCENTIVE +( (V_CAL_INCENT - I.PRODUCTIVITY_LOWER_BOUND) + 1) * I.PAYOUT_RATE;
    END IF;
    
    
  --  SELECT COUNT(1) INTO V_EXISTS FROM DAILY_INCENTIVE  WHERE USER_ID=P_USERID AND ROLE_ID=P_ROLEID AND TRUNC(DAY)=TRUNC(P_DATE);
   -- IF V_EXISTS <>0 THEN
      UPDATE DAILY_INCENTIVE SET INCENTVE= V_INCENTIVE, PRODUCTIVITY_LOWER_BOUND=I.PRODUCTIVITY_LOWER_BOUND,
      PRODUCTIVITY_UPPER_BOUND=I.PRODUCTIVITY_UPPER_BOUND,PAYOUT_RATE=I.PAYOUT_RATE 
      WHERE USER_ID=P_USERID AND ROLE_ID=P_ROLEID AND TRUNC(DAY)=TRUNC(P_DATE);
   -- ELSE
   --   UPDATE DAILY_INCENTIVE SET INCENTVE= V_INCENTIVE, PRODUCTIVITY_LOWER_BOUND=I.PRODUCTIVITY_LOWER_BOUND,
    --  PRODUCTIVITY_UPPER_BOUND=I.PRODUCTIVITY_UPPER_BOUND,PAYOUT_RATE=I.PAYOUT_RATE 
   --   WHERE USER_ID=P_USERID AND ROLE_ID=P_ROLEID AND TRUNC(DAY)=TRUNC(P_DATE+1);
  --  END IF;
    
    COMMIT;
    V_INCENTIVE:=0;
    EXIT;
    END IF;
    
    END LOOP;
    P_MSG :='Reassign case is completed successfully for incentive';
  P_STATUS_MSG :=0;
   EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
    P_MSG :='Reassign case is not completed for incentive for UserId: '||to_char(P_USERID)||' RoleId : '||to_char(P_ROLEID);
    P_STATUS_MSG :=1;
    STATUSMESSAGE := 'An error was encountered - '||SQLCODE||' - '||SQLERRM;
    LOG_APEX_ERROR(101,P_MSG,statusMessage,P_USERID);
    --dbms_output.put_line('Reassign case is not completed for incentive :'|| to_char(P_CASEID));
END UPDATE_INCENTIVE;




PROCEDURE MONTHLY_PRODUCTIVITY AS

BEGIN
DELETE FROM MONTHLY_PRODUCTIVITY WHERE MONTH=EXTRACT(MONTH FROM SYSDATE);
INSERT INTO MONTHLY_PRODUCTIVITY(USERID,MONTH,PRODUCTIVITY_VALUE,ROLE_ID)
SELECT USER_ID,EXTRACT(MONTH FROM SYSDATE),SUM(PRODUCTIVITY_VALUE) PRODUCTIVITY_VALUE, ROLE_ID FROM DAILY_PRODUCTIVITY WHERE TRUNC(SYSDATE,'MON')=TRUNC(DAY,'MON')
GROUP BY USER_ID,ROLE_ID;
COMMIT;
EXCEPTION WHEN OTHERS THEN
     ROLLBACK;
        STATUSMESSAGE := 'An error was encountered - '||SQLCODE||' - '||SQLERRM;
        LOG_APEX_ERROR(101,'MONTHLY_PRODUCTIVITY',statusMessage);
END MONTHLY_PRODUCTIVITY;

PROCEDURE DAILY_INCENTIVE AS
V_IND_START TIMESTAMP := CAST(TRUNC(SYSDATE)||' 08.00.00 PM ASIA/CALCUTTA' AS TIMESTAMP WITH TIME ZONE) AT TIME ZONE 'America/New_York';
V_IND_END TIMESTAMP := CAST(TRUNC(SYSDATE+1)||' 07.59.00 PM ASIA/CALCUTTA' AS TIMESTAMP WITH TIME ZONE) AT TIME ZONE 'America/New_York';
-- Date time consider 8.00 AM - 7.30 AM(next day for india)
V_IND_CURRENT_START TIMESTAMP := current_timestamp ;
V_IND_CURRENT_END TIMESTAMP := CAST(TRUNC(SYSDATE+1)||' 07.30.00 PM ASIA/CALCUTTA' AS TIMESTAMP WITH TIME ZONE) AT TIME ZONE 'America/New_York';
V_CAL_INCENT NUMBER:=0;
V_CHK_COUNT NUMBER :=0;
V_INCENTIVE NUMBER(10,2):=0.00;

BEGIN
-- INCENTIVE --
DELETE FROM DAILY_INCENTIVE WHERE TRUNC(DAY)=TRUNC(AM8_IND);
 
FOR REC IN (SELECT * FROM DAILY_PRODUCTIVITY WHERE TRUNC(DAY)=TRUNC(AM8_IND)
 --  WHERE   (TO_TIMESTAMP(DAY)  AT TIME ZONE 'America/New_York' BETWEEN CAST(TRUNC(SYSDATE)||' 08.00.00 AM ASIA/CALCUTTA' AS TIMESTAMP WITH TIME ZONE) AT TIME ZONE 'America/New_York' AND
 --  CAST(TRUNC(SYSDATE+1)||' 07.50.00 AM ASIA/CALCUTTA' AS TIMESTAMP WITH TIME ZONE) AT TIME ZONE 'America/New_York')
   ) LOOP

 SELECT COUNT(*) INTO V_CHK_COUNT FROM 
   (SELECT * FROM ROLE_PAYOUTS ORDER BY ROLE_ID,PRODUCTIVITY_LOWER_BOUND ASC) WHERE ROLE_ID=REC.ROLE_ID AND ROWNUM=1 AND PRODUCTIVITY_LOWER_BOUND<=REC.PRODUCTIVITY_VALUE;
    IF V_CHK_COUNT<>0 THEN
   
    V_CAL_INCENT := REC.PRODUCTIVITY_VALUE;
    
    FOR I IN  (SELECT * FROM ROLE_PAYOUTS WHERE ROLE_ID=REC.ROLE_ID ORDER BY PRODUCTIVITY_LOWER_BOUND ASC) LOOP
    
    BEGIN
    IF  V_CAL_INCENT >= I.PRODUCTIVITY_UPPER_BOUND THEN
    
      V_INCENTIVE := V_INCENTIVE + ((I.PRODUCTIVITY_UPPER_BOUND-I.PRODUCTIVITY_LOWER_BOUND) + 1) * I.PAYOUT_RATE;
      
  
    END IF;
   
   
    
    IF 
    V_CAL_INCENT >= I.PRODUCTIVITY_LOWER_BOUND and V_CAL_INCENT <= I.PRODUCTIVITY_UPPER_BOUND
    THEN
    IF REC.PRODUCTIVITY_VALUE != I.PRODUCTIVITY_UPPER_BOUND THEN
    V_INCENTIVE := V_INCENTIVE +( (V_CAL_INCENT - I.PRODUCTIVITY_LOWER_BOUND) + 1) * I.PAYOUT_RATE;
    END IF;
     
    INSERT INTO DAILY_INCENTIVE(INCENTIVEID,INCENTVE,ROLE_ID,PRODUCTIVITY_LOWER_BOUND,PRODUCTIVITY_UPPER_BOUND,PAYOUT_RATE,USER_ID,DAY) 
    VALUES(REC.PRODUCTIVITYID,V_INCENTIVE,REC.ROLE_ID,I.PRODUCTIVITY_LOWER_BOUND,I.PRODUCTIVITY_UPPER_BOUND,I.PAYOUT_RATE,REC.USER_ID,AM8_IND);
  COMMIT;
   V_INCENTIVE:=0;
    EXIT;
  
    END IF;
    
    END;
    END LOOP;
    END IF;
    END LOOP;


   EXCEPTION WHEN OTHERS THEN
     ROLLBACK;
        STATUSMESSAGE := 'An error was encountered - '||SQLCODE||' - '||SQLERRM;
        LOG_APEX_ERROR(101,'DAILY_INCENTIVE',statusMessage);

END DAILY_INCENTIVE;

PROCEDURE MONTHLY_INCENTIVE
AS
BEGIN
DELETE FROM MONTHLY_INCENTIVE WHERE MONTH=EXTRACT(MONTH FROM SYSDATE);
INSERT INTO MONTHLY_INCENTIVE(USERID,MONTH,INCOME,ROLE_ID)
SELECT DI.USER_ID,MON, INCENTVE * nvl(SCORE,1), ROLE_ID FROM
   (SELECT USER_ID,EXTRACT(MONTH FROM SYSDATE) MON,SUM(INCENTVE) INCENTVE, ROLE_ID FROM DAILY_INCENTIVE WHERE TRUNC(SYSDATE,'MON')=TRUNC(DAY,'MON')
GROUP BY USER_ID,ROLE_ID) DI,ATTENDANCE_SCORE ATS  WHERE DI.USER_ID=ATS.USER_ID(+) AND DI.MON=ATS.MONTH(+);
--SELECT USER_ID,EXTRACT(MONTH FROM SYSDATE),SUM(INCENTVE) INCENTVE, ROLE_ID FROM DAILY_INCENTIVE WHERE TRUNC(SYSDATE,'MON')=TRUNC(DAY,'MON')
--GROUP BY USER_ID,ROLE_ID;
COMMIT;
 EXCEPTION WHEN OTHERS THEN
     ROLLBACK;
        STATUSMESSAGE := 'An error was encountered - '||SQLCODE||' - '||SQLERRM;
        LOG_APEX_ERROR(103,'MONTHLY_INCENTIVE',statusMessage);
END MONTHLY_INCENTIVE;

FUNCTION GET_EXACTDAY_AFTER8AM--(P IN NUMBER) 
return DATE
IS
  V_ISTDATE DATE; 
BEGIN
  
  SELECT to_date(TO_CHAR((CURRENT_TIMESTAMP AT TIME ZONE 'ASIA/CALCUTTA')  - INTERVAL '20' HOUR ,'DD-Mon-RR HH:MI:SS AM'),'DD-Mon-RR HH:MI:SS AM') into V_ISTDATE FROM dual;
RETURN V_ISTDATE;
  
END GET_EXACTDAY_AFTER8AM;


FUNCTION GET_EXACTDAY_AFTER8AM(P_MONTH IN VARCHAR2)--(P IN NUMBER) 
return DATE
IS
  V_ISTDATE DATE; 
  V_CURRENT_MONTH  VARCHAR2(10);
BEGIN
  select (to_char(sysdate, 'MM')) INTO V_CURRENT_MONTH  from dual;
  IF P_MONTH= V_CURRENT_MONTH  THEN
  SELECT to_date(TO_CHAR((CURRENT_TIMESTAMP AT TIME ZONE 'ASIA/CALCUTTA')  - INTERVAL '8' HOUR ,'DD-Mon-RR HH:MI:SS AM'),'DD-Mon-RR HH:MI:SS AM') into V_ISTDATE FROM dual;
  ELSE
  SELECT TO_CHAR(ADD_MONTHS(to_date(TO_CHAR((CURRENT_TIMESTAMP AT TIME ZONE 'ASIA/CALCUTTA')  - INTERVAL '8' HOUR ,'DD-Mon-RR HH:MI:SS AM'),'DD-Mon-RR HH:MI:SS AM'),-1),'DD-MON-YY') into V_ISTDATE FROM dual;
  END IF;
RETURN V_ISTDATE;
END GET_EXACTDAY_AFTER8AM;

FUNCTION GET_ADITLOG_VALUE(
    P_USER NUMBER)
  RETURN NUMBER
AS
  L_COUNT NUMBER(10);
  V_TIMESTAMP VARCHAR2(22); 
  IND_PRE VARCHAR2(22);
  IND_NEXT VARCHAR2(22);
BEGIN


select COUNT(1) INTO L_COUNT from
     ( SELECT TO_CHAR(SYS_EXTRACT_UTC(TIMESTAMP)+5.5/24,'DD-Mon-RR HH:MI:SS AM') A,
      TO_CHAR(TRUNC(SYS_EXTRACT_UTC(SYSTIMESTAMP)+5.5/24)+ INTERVAL '8' HOUR,'DD-Mon-RR HH:MI:SS AM') B,
      TO_CHAR(TRUNC(SYS_EXTRACT_UTC(SYSTIMESTAMP)+5.5/24)+1+ INTERVAL '7' HOUR + INTERVAL '59' MINUTE,'DD-Mon-RR HH:MI:SS AM') C,
      TO_TIMESTAMP(TO_CHAR(TRUNC(SYS_EXTRACT_UTC(SYSTIMESTAMP)+5.5/24)+1+ INTERVAL '7' HOUR + INTERVAL '59' MINUTE,'DD-Mon-RR HH:MI:SS AM'),'DD-Mon-RR HH:MI:SS AM') d
      FROM AUDITLOG WHERE USERID=p_user AND ACTIONID=87 )
      WHERE TO_TIMESTAMP(A,'DD-Mon-RR HH:MI:SS AM') >=TO_TIMESTAMP(B,'DD-Mon-RR HH:MI:SS AM')
      and TO_TIMESTAMP(A,'DD-Mon-RR HH:MI:SS AM') <=TO_TIMESTAMP(C,'DD-Mon-RR HH:MI:SS AM');
  

  RETURN (L_COUNT);
END GET_ADITLOG_VALUE;

FUNCTION DUP_USER(P_CASEID IN NUMBER,P_USERID IN NUMBER,P_STAGEID IN NUMBER) RETURN NUMBER AS
V_REASON CASEHISTORYSUM.ASSIGNMENT_REASON%TYPE := 'Case Correction';
V_OTHER_REASON CASEHISTORYSUM.ASSIGNMENT_REASON%TYPE := 'Case Correction By Other User';
V_CHK_REASON NUMBER :=0;
BEGIN
SELECT COUNT(1) INTO V_CHK_REASON  FROM CASEHISTORYSUM WHERE STAGEID=P_STAGEID AND USERID=P_USERID AND  CASEID=P_CASEID AND ASSIGNMENT_REASON =V_REASON ;
 IF V_CHK_REASON<>0 THEN
 V_CHK_REASON :=1;
 END IF;
 RETURN V_CHK_REASON;
END;
END DASHBOARD;