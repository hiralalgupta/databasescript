Drop table "SNX_IWS2"."CLIENTKEYS";
CREATE TABLE "SNX_IWS2"."CLIENTKEYS"
  (
    "KID"         NUMBER NOT NULL ENABLE,
    "CLIENTID"    NUMBER,
    "KEY_TYPE"    VARCHAR2(100 BYTE),
    "DESCRIPTION" VARCHAR2(2000 BYTE),
    "SEQUENCE"    NUMBER,
    "KEY_FILE"    BLOB,
    "PASSPHRASE"  VARCHAR2(200 BYTE),
    "EFFECTIVE_DATE" TIMESTAMP (4) WITH TIME ZONE,
    "EXPIRATION_DATE" TIMESTAMP (4) WITH TIME ZONE,
    "STATUS"     VARCHAR2(20 BYTE),
    "NOTE"       VARCHAR2(2000 BYTE),
    "CREATED_BY" NUMBER,
    "CREATED_TIMESTAMP" TIMESTAMP (4) WITH TIME ZONE, 
    "UPDATED_BY" NUMBER, 
    "UPDATED_TIMESTAMP" TIMESTAMP (4) WITH TIME ZONE,
  CONSTRAINT "CLIENTKEYS_PK" PRIMARY KEY ("KID") USING INDEX TABLESPACE "SNX_IWS_INX" ENABLE
  )
  TABLESPACE "SNX_IWS" LOB
  (
    "KEY_FILE"
  )
  STORE AS SECUREFILE
  (
    TABLESPACE "SNX_IWS_LOB" COMPRESS MEDIUM DEDUPLICATE
  ) ;
CREATE INDEX "SNX_IWS2"."CLIENTKEYS_INDEX1" ON "SNX_IWS2"."CLIENTKEYS"
  (
    "CLIENTID",
    "KEY_TYPE",
    "EFFECTIVE_DATE",
    "EXPIRATION_DATE",
    "STATUS"
  )
  TABLESPACE "SNX_IWS_INX" ;
  
DROP SEQUENCE SNX_IWS2.CLIENTKEYS_SEQ;
--Create Sequence
CREATE SEQUENCE SNX_IWS2.CLIENTKEYS_SEQ MINVALUE 1 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE;

--Create Trigger
CREATE OR REPLACE TRIGGER SNX_IWS2.CLIENTKEYS_KID_TGR before INSERT ON SNX_IWS2.CLIENTKEYS FOR EACH row
  BEGIN
    IF inserting THEN
      select current_timestamp into :new.CREATED_TIMESTAMP from dual;
      IF :NEW.KID IS NULL THEN
        SELECT SNX_IWS2.CLIENTKEYS_SEQ.nextval INTO :NEW.KID FROM dual;
      END IF;
    END IF;
  END;
/
