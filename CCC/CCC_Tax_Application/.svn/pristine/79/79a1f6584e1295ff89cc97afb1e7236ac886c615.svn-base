package com.ccc.webapp.mvc.configuration;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.concurrent.ConcurrentMapCache;
import org.springframework.cache.support.SimpleCacheManager;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ReloadableResourceBundleMessageSource;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.util.StringUtils;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.LocaleResolver;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.i18n.CookieLocaleResolver;
import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;
import org.springframework.web.servlet.view.InternalResourceViewResolver;
import org.springframework.web.servlet.view.JstlView;

import com.ccc.exception.RestResponseErrorHandler;
import com.ccc.webapp.util.ErrorResponse;

@Configuration
@EnableWebMvc
@EnableCaching
@ComponentScan({ "com.ccc.*" })
public class MvcConfig extends WebMvcConfigurerAdapter {

	
	/*@Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**");
    }*/
	
	@Override
	public void addViewControllers(ViewControllerRegistry registry) {
	registry.addViewController("/home").setViewName("welcome");
	registry.addViewController("/").setViewName("welcome");
	registry.addViewController("/taxCalculate").setViewName("taxCalculate");
	registry.addViewController("/lookUpTaxCalculate").setViewName("lookUpTaxCalculate");
	//registry.addViewController("/admin").setViewName("admin");
	//registry.addViewController("/dba").setViewName("dba");
	registry.addViewController("/login").setViewName("login");
	registry.addViewController("/autocomplete").setViewName("autocomplete");
	registry.addViewController("/modifyTax").setViewName("modifyTax");
	registry.addViewController("/getExcelReport").setViewName("getExcelReport");
	
	registry.addViewController("/accessDenied").setViewName("accessDenied");
	}
	@Bean(name="viewResolver")
	public InternalResourceViewResolver viewResolver(){
		InternalResourceViewResolver resolver = new InternalResourceViewResolver();
	resolver.setPrefix("/WEB-INF/jsp/");
	resolver.setSuffix(".jsp");
	 resolver.setViewClass(JstlView.class);
	return resolver;
	}
	/*
     * Configure ResourceHandlers to serve static resources like CSS/ Javascript etc...
     */
	@Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/static/**").addResourceLocations("/static/");
    }
	@Override
	public void addInterceptors(InterceptorRegistry registry) {

		LocaleChangeInterceptor localeChangeInterceptor = new LocaleChangeInterceptor();
		localeChangeInterceptor.setParamName("lang");
		registry.addInterceptor(localeChangeInterceptor);
	}

	@Bean
	public LocaleResolver localeResolver() {

		CookieLocaleResolver cookieLocaleResolver = new CookieLocaleResolver();
		cookieLocaleResolver.setDefaultLocale(StringUtils.parseLocaleString("en"));
		return cookieLocaleResolver;
	}
	@Bean
	public MessageSource messageSource() {

		ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
		messageSource.setBasenames("classpath:messages/messages", "classpath:messages/validation");
		// if true, the key of the message will be displayed if the key is not
		// found, instead of throwing a NoSuchMessageException
		messageSource.setUseCodeAsDefaultMessage(true);
		messageSource.setDefaultEncoding("UTF-8");
		// # -1 : never reload, 0 always reload
		messageSource.setCacheSeconds(0);
		return messageSource;
	}
	
	@Bean
    public CacheManager cacheManager() {
       SimpleCacheManager cacheManager = new SimpleCacheManager();
       cacheManager.setCaches(Arrays.asList(new ConcurrentMapCache("zipplusCache")));
       return cacheManager;
    }
	
	@Bean
	public List<HttpMessageConverter<?>> configureMessageConverters() {
		List<HttpMessageConverter<?>> httpMessageConverters=new ArrayList<HttpMessageConverter<?>>();
        MappingJackson2HttpMessageConverter messageConverter=new MappingJackson2HttpMessageConverter();
        List<MediaType> mediaTypes = new ArrayList<MediaType>();
        mediaTypes.add(MediaType.APPLICATION_JSON);
        messageConverter.setSupportedMediaTypes(mediaTypes);
        httpMessageConverters.add(messageConverter);
		//Sthis.delegate = new HttpMessageConverterExtractor<T>(responseType, httpMessageConverters);;
        
        return httpMessageConverters;
    }
	
	/*@Override
	public void onStartup(ServletContext servletContext) throws ServletException {
		servletContext.setInitParameter("contextInitializerClasses", "xyz");
	}*/
	@Bean
	public RestTemplate restTemplate() {
		RestTemplate restTemplate = new RestTemplate();
		
	 	restTemplate.setMessageConverters(configureMessageConverters());
        restTemplate.setErrorHandler(new RestResponseErrorHandler<>(ErrorResponse.class));
        
        return restTemplate;
	}
	/*@Bean
	public Function<String, AuthenticationToken> tokenFun(){
		return token->authenticationToken(token);
	}
	@Bean
	public AuthenticationToken authenticationToken(String token){
		return new AuthenticationToken(token);
	}*/
}
