package com.ccc.dao.impl;

import java.util.List;

import javax.persistence.Query;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.ccc.dao.AbstractDao;
import com.ccc.dao.SaleTaxDao;
import com.ccc.model.User;
@Repository
public class SaleTaxDaoImpl extends AbstractDao<Long, User>  implements SaleTaxDao  {

	
	
	@Override
	public List<Object[]> getSaleTax(Integer plus4,Integer zip,String rName,String cName,String modelMake,String modelName,Integer modelYear, String modelTrim,String plateType) {
		Session session =getSession();
				
		String trimData = !StringUtils.isEmpty(modelTrim)? " AND UPPER(M.TRIM)=UPPER(:modelTrim) LIMIT 1":" LIMIT 1";
		String plateT = !StringUtils.isEmpty(plateType)? " AND UPPER(F.FEESNAME)=UPPER(:plateType) ":" ";
		
				StringBuilder sqlAppender=new StringBuilder("SELECT DISTINCT  L.LOCATIONRATE,CASE WHEN L.ISRTA='N' THEN 0 ELSE T.RTA END RTA,T.RATE AS SALES_TAX,FEES.REGISTRATIONFEES,FEES.VEHICLEFEES, FEES.TITLEFEES,W.FEES AS WEIGHTFEES, F.FEESVALUE AS PLATETYPEFEES,"
						+ "FEES.VEHICLEIDENTIFICATIONNUMBER, T.LOCATIONRATEURL,T.SALETAXURL,T.RTAURL,FEES.TITLEFEESURL,FEES.REGISTRATIONFEESURL,FEES.VEHICLETYPEURL,FEES.WEIGHTURL,F.FEESURL AS PLATETYPEFEESURL,FEES.VINURL FROM (SELECT 0 AS WEIGHT_ST,0 AS WEIGHT_ED,-1 AS FEES,1 REGIONID "
						+ "UNION ALL  SELECT 1 AS WEIGHT_ST,4000 AS WEIGHT_ED,53 AS FEES,1 REGIONID UNION ALL SELECT W.WEIGHT AS WEIGHT_ST,W1.WEIGHT AS WEIGHT_ED,W1.FEES,W.REGIONID FROM WEIGHTFEES W, "
						+ "WEIGHTFEES W1 WHERE (W.WEIGHTFEESID+1)=W1.WEIGHTFEESID) W INNER JOIN REGION R ON R.REGIONID=W.REGIONID INNER JOIN COUNTY C ON C.REGIONID=R.REGIONID "
						+ "INNER JOIN LOCATION L ON L.COUNTYID=C.COUNTYID LEFT OUTER JOIN MODELS M ON M.WEIGHT_POUND BETWEEN W.WEIGHT_ST AND  W.WEIGHT_ED "
						+ "INNER JOIN MODELMAKE MM ON MM.MODELMAKEID=M.MODELMAKEID INNER JOIN VEHICLEMODELS VM ON VM.VEHICLEMODELID=M.VEHICLEMODELID "
						+ "LEFT OUTER JOIN TAX T ON L.REGIONID=T.TOREGIONID INNER JOIN "
						+ "(SELECT  TIT.REGIONID,TITLEFEES,TITLEFEESURL,REGISTRATIONFEES,REGISTRATIONFEESURL,VEHICLEFEES,VEHICLETYPEURL,WEIGHTFEES,WEIGHTURL,VEHICLEIDENTIFICATIONNUMBER,VINURL "
						+ "FROM (SELECT FEESVALUE TITLEFEES,REGIONID,FEESURL TITLEFEESURL FROM FEES WHERE FEESID=1) TIT, "
						+ "(SELECT FEESVALUE REGISTRATIONFEES,REGIONID,FEESURL REGISTRATIONFEESURL FROM FEES WHERE FEESID=2) REG, "
						+ "(SELECT FEESVALUE VEHICLEFEES,REGIONID,FEESURL VEHICLETYPEURL FROM FEES WHERE FEESID=3) VEH, "
						+ "(SELECT FEESVALUE WEIGHTFEES,REGIONID,FEESURL WEIGHTURL FROM FEES WHERE FEESID=4) WEI, "
						+ "(SELECT FEESVALUE VEHICLEIDENTIFICATIONNUMBER,REGIONID,FEESURL VINURL FROM FEES WHERE FEESID=6) VIN WHERE REG.REGIONID=TIT.REGIONID AND REG.REGIONID=VEH.REGIONID AND REG.REGIONID=WEI.REGIONID "
						+ "AND REG.REGIONID=VIN.REGIONID) FEES ON FEES.REGIONID=R.REGIONID "
						+ "INNER JOIN FEES F ON F.REGIONID=R.REGIONID AND F.FEESCATEGORYID=4 "
						+ " WHERE UPPER(R.NAME)=UPPER(:rName) AND UPPER(C.NAME)=UPPER(:cName) AND L.PLUS4=:plus4 AND L.ZIP=:zip AND UPPER(MM.MODELMAKE)=UPPER(:modelMake) "
						+ " AND UPPER(VM.MODELNAME)=UPPER(:modelName) AND M.YEAR=:modelYear ").append(plateT).append(trimData);
		
		
		System.out.println("QUERY "+sqlAppender.toString());
		@SuppressWarnings("deprecation")
		Query query=session.createNativeQuery(sqlAppender.toString());
		query.setParameter("rName", rName);
		query.setParameter("cName", cName);
		query.setParameter("plus4", plus4);
		query.setParameter("zip", zip);
		query.setParameter("modelMake", modelMake);
		query.setParameter("modelName", modelName);
		query.setParameter("modelYear", modelYear);
		if(!StringUtils.isEmpty(plateType))
			query.setParameter("plateType", plateType);
		if(!StringUtils.isEmpty(modelTrim))
			query.setParameter("modelTrim", modelTrim);
		List<Object[]> list=query.getResultList();
		return list;
		
	}

	@Override
	public List<Object[]> getTaxWithWeightInfo(Integer weight, Integer plus4,
			Integer zip, String rName, String cName, String modelMake,
			String modelName, Integer modelYear, String modelTrim,
			String plateType) {
		
		Session session =getSession();
		
		String trimData = !StringUtils.isEmpty(modelTrim)? " AND UPPER(M.TRIM)=UPPER(:modelTrim) LIMIT 1":" LIMIT 1";
		String plateT = !StringUtils.isEmpty(plateType)? " AND UPPER(F.FEESNAME)=UPPER(:plateType) ":" ";
		
		StringBuilder sqlAppender=new StringBuilder("SELECT DISTINCT  L.LOCATIONRATE,CASE WHEN L.ISRTA='N' THEN 0 ELSE T.RTA END RTA,T.RATE AS SALES_TAX,FEES.REGISTRATIONFEES,FEES.VEHICLEFEES, FEES.TITLEFEES,"
				+ "CASE WHEN "+weight+" BETWEEN W.WEIGHT_ST AND  W.WEIGHT_ED  THEN W.FEES  WHEN M.WEIGHT_POUND!=0  THEN 0  WHEN M.WEIGHT_POUND=0   THEN (SELECT FEES FROM WEIGHTFEES WHERE WEIGHT >= "+weight+" ORDER BY WEIGHTFEESID ASC LIMIT 1 )END "
				+ "AS WEIGHTFEES, F.FEESVALUE AS PLATETYPEFEES, FEES.VEHICLEIDENTIFICATIONNUMBER, T.LOCATIONRATEURL,T.SALETAXURL,T.RTAURL,FEES.TITLEFEESURL,FEES.REGISTRATIONFEESURL,FEES.VEHICLETYPEURL,FEES.WEIGHTURL,"
				+ "F.FEESURL AS PLATETYPEFEESURL,FEES.VINURL, IFNULL((SELECT WEIGHT_PARAMETER FROM (SELECT weight.*, @i\\:=@i+1 AS WEIGHT_PARAMETER FROM (SELECT 0 AS WEIGHT_ST,0 AS WEIGHT_ED,-1 AS FEES,(SELECT REGIONID FROM REGION) AS REGIONID"
				+ "  UNION ALL SELECT 1 AS WEIGHT_ST,4000 AS WEIGHT_ED,53 AS FEES,(SELECT REGIONID FROM REGION) AS REGIONID  UNION ALL  SELECT W.WEIGHT+1 AS WEIGHT_ST,W1.WEIGHT AS WEIGHT_ED,W1.FEES,W.REGIONID FROM WEIGHTFEES W, "
				+ " WEIGHTFEES W1 WHERE (W.WEIGHTFEESID+1)=W1.WEIGHTFEESID) weight, (SELECT @i\\:=-1) AS WEIGHT_PARAMETER) W_PARAMETER WHERE ("+weight+" BETWEEN W_PARAMETER.WEIGHT_ST AND  W_PARAMETER.WEIGHT_ED) AND  W_PARAMETER.REGIONID=W.REGIONID) "
				+ " -(SELECT WEIGHTFEESID FROM WEIGHTFEES WF WHERE WF.FEES=W.FEES),-1) AS WEIGHT_PARAMETER  FROM ( SELECT 0 AS WEIGHT_ST,0 AS WEIGHT_ED,-1 AS FEES,(SELECT REGIONID FROM REGION) AS REGIONID  UNION ALL"
				+ "  SELECT 1 AS WEIGHT_ST,4000 AS WEIGHT_ED,53 AS FEES,(SELECT REGIONID FROM REGION) AS REGIONID UNION ALL SELECT W.WEIGHT+1 AS WEIGHT_ST,W1.WEIGHT AS WEIGHT_ED,W1.FEES,W.REGIONID FROM WEIGHTFEES W, WEIGHTFEES W1 "
				+ "WHERE (W.WEIGHTFEESID+1)=W1.WEIGHTFEESID AND W.REGIONID=W1.REGIONID) W INNER JOIN REGION R ON R.REGIONID=W.REGIONID INNER JOIN COUNTY C ON C.REGIONID=R.REGIONID INNER JOIN LOCATION L ON L.COUNTYID=C.COUNTYID"
				+ " LEFT OUTER JOIN MODELS M ON M.WEIGHT_POUND BETWEEN W.WEIGHT_ST AND  W.WEIGHT_ED INNER JOIN MODELMAKE MM ON MM.MODELMAKEID=M.MODELMAKEID INNER JOIN VEHICLEMODELS VM ON VM.VEHICLEMODELID=M.VEHICLEMODELID"
				+ " LEFT OUTER JOIN TAX T ON L.REGIONID=T.TOREGIONID INNER JOIN (SELECT  TIT.REGIONID,TITLEFEES,TITLEFEESURL,REGISTRATIONFEES,REGISTRATIONFEESURL,VEHICLEFEES,VEHICLETYPEURL,WEIGHTFEES,WEIGHTURL,VEHICLEIDENTIFICATIONNUMBER,"
				+ "VINURL FROM (SELECT FEESVALUE TITLEFEES,REGIONID,FEESURL TITLEFEESURL FROM FEES WHERE FEESID=1) TIT, (SELECT FEESVALUE REGISTRATIONFEES,REGIONID,FEESURL REGISTRATIONFEESURL FROM FEES WHERE FEESID=2) REG,"
				+ "(SELECT FEESVALUE VEHICLEFEES,REGIONID,FEESURL VEHICLETYPEURL FROM FEES WHERE FEESID=3) VEH, (SELECT FEESVALUE WEIGHTFEES,REGIONID,FEESURL WEIGHTURL FROM FEES WHERE FEESID=4) WEI,"
				+ " (SELECT FEESVALUE VEHICLEIDENTIFICATIONNUMBER,REGIONID,FEESURL VINURL FROM FEES WHERE FEESID=6) VIN WHERE REG.REGIONID=TIT.REGIONID AND REG.REGIONID=VEH.REGIONID AND REG.REGIONID=WEI.REGIONID"
				+ " AND REG.REGIONID=VIN.REGIONID) FEES ON FEES.REGIONID=R.REGIONID INNER JOIN FEES F ON F.REGIONID=R.REGIONID AND F.FEESCATEGORYID=4 WHERE W.WEIGHT_ST IS NOT NULL AND UPPER(R.NAME)=UPPER(:rName)"
				+ " AND UPPER(C.NAME)=UPPER(:cName) AND L.PLUS4=:plus4 AND L.ZIP=:zip AND UPPER(MM.MODELMAKE)=UPPER(:modelMake) "
				+ " AND UPPER(VM.MODELNAME)=UPPER(:modelName) AND M.YEAR=:modelYear ").append(plateT).append(trimData);


		
			System.out.println("QUERY "+sqlAppender.toString());
			@SuppressWarnings("deprecation")
			Query query=session.createNativeQuery(sqlAppender.toString());
			query.setParameter("rName", rName);
			query.setParameter("cName", cName);
			query.setParameter("plus4", plus4);
			query.setParameter("zip", zip);
			query.setParameter("modelMake", modelMake);
			query.setParameter("modelName", modelName);
			query.setParameter("modelYear", modelYear);
			if(!StringUtils.isEmpty(plateType))
				query.setParameter("plateType", plateType);
			if(!StringUtils.isEmpty(modelTrim))
				query.setParameter("modelTrim", modelTrim);
			List<Object[]> list=query.getResultList();
			return list;

	}

}
